// Generated by @typesafe-sql

open PgTypes

// -- @getTypes
// select
//   t.oid,
//   t.typname,
//   t.typnamespace::regnamespace,
//   t.typlen,
//   t.typbyval,
//   t.typtype,
//   t.typcategory,
//   t.typispreferred,
//   t.typisdefined,
//   t.typdelim,
//   t.typrelid,
//   t.typelem,
//   t.typarray,
//   t.typnotnull,
//   t.typbasetype,
//   t.typtypmod,
//   t.typndims,
//   t.typcollation,
//   t.typdefault,
//   r.rngsubtype,
//   (select array_agg(a.attname::text order by a.attnum)
//     from pg_attribute a
//     where a.attrelid = t.typrelid
//     and a.attisdropped = false
//     and a.attnum >= 0) as attr_names,
//   (select array_agg(a.atttypid order by a.attnum)
//     from pg_attribute a where a.attrelid = t.typrelid
//     and a.attisdropped = false
//     and a.attnum >= 0) as attr_types,
//   (select array_agg(e.enumlabel::text order by e.enumsortorder)
//     from pg_enum e where e.enumtypid = t.oid) as enum_labels
// from pg_type t
// left join pg_range r on r.rngtypid = t.oid
// where t.oid = ANY ($typeIds::int[])
module GetTypes = {
  let statement = "-- @getTypes\nselect\n  t.oid,\n  t.typname,\n  t.typnamespace::regnamespace,\n  t.typlen,\n  t.typbyval,\n  t.typtype,\n  t.typcategory,\n  t.typispreferred,\n  t.typisdefined,\n  t.typdelim,\n  t.typrelid,\n  t.typelem,\n  t.typarray,\n  t.typnotnull,\n  t.typbasetype,\n  t.typtypmod,\n  t.typndims,\n  t.typcollation,\n  t.typdefault,\n  r.rngsubtype,\n  (select array_agg(a.attname::text order by a.attnum) \n    from pg_attribute a \n    where a.attrelid = t.typrelid \n    and a.attisdropped = false\n    and a.attnum >= 0) as attr_names,\n  (select array_agg(a.atttypid order by a.attnum) \n    from pg_attribute a where a.attrelid = t.typrelid \n    and a.attisdropped = false\n    and a.attnum >= 0) as attr_types,\n  (select array_agg(e.enumlabel::text order by e.enumsortorder)\n    from pg_enum e where e.enumtypid = t.oid) as enum_labels\nfrom pg_type t\nleft join pg_range r on r.rngtypid = t.oid\nwhere t.oid = ANY ($1::int[])"
  type parameters = array<Pg_catalog._int4>
  type parametersRecord = {typeIds: Pg_catalog._int4}
  type row = (
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.name>,
    Js.Nullable.t<Pg_catalog.regnamespace>,
    Js.Nullable.t<Pg_catalog.int2>,
    Js.Nullable.t<Pg_catalog.bool_>,
    Js.Nullable.t<Pg_catalog.char_>,
    Js.Nullable.t<Pg_catalog.char_>,
    Js.Nullable.t<Pg_catalog.bool_>,
    Js.Nullable.t<Pg_catalog.bool_>,
    Js.Nullable.t<Pg_catalog.char_>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.bool_>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.int4>,
    Js.Nullable.t<Pg_catalog.int4>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.text>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog._text>,
    Js.Nullable.t<Pg_catalog._oid>,
    Js.Nullable.t<Pg_catalog._text>,
  )
  type rowRecord = {
    oid: option<Pg_catalog.oid>,
    typname: option<Pg_catalog.name>,
    typnamespace: option<Pg_catalog.regnamespace>,
    typlen: option<Pg_catalog.int2>,
    typbyval: option<Pg_catalog.bool_>,
    typtype: option<Pg_catalog.char_>,
    typcategory: option<Pg_catalog.char_>,
    typispreferred: option<Pg_catalog.bool_>,
    typisdefined: option<Pg_catalog.bool_>,
    typdelim: option<Pg_catalog.char_>,
    typrelid: option<Pg_catalog.oid>,
    typelem: option<Pg_catalog.oid>,
    typarray: option<Pg_catalog.oid>,
    typnotnull: option<Pg_catalog.bool_>,
    typbasetype: option<Pg_catalog.oid>,
    typtypmod: option<Pg_catalog.int4>,
    typndims: option<Pg_catalog.int4>,
    typcollation: option<Pg_catalog.oid>,
    typdefault: option<Pg_catalog.text>,
    rngsubtype: option<Pg_catalog.oid>,
    attr_names: option<Pg_catalog._text>,
    attr_types: option<Pg_catalog._oid>,
    enum_labels: option<Pg_catalog._text>,
  }
  let convertParameters = (r: parametersRecord): parameters => [r.typeIds]
  let convertRow = (
    (
      oid,
      typname,
      typnamespace,
      typlen,
      typbyval,
      typtype,
      typcategory,
      typispreferred,
      typisdefined,
      typdelim,
      typrelid,
      typelem,
      typarray,
      typnotnull,
      typbasetype,
      typtypmod,
      typndims,
      typcollation,
      typdefault,
      rngsubtype,
      attr_names,
      attr_types,
      enum_labels,
    ): row,
  ): rowRecord => {
    oid: oid->Js.Nullable.toOption,
    typname: typname->Js.Nullable.toOption,
    typnamespace: typnamespace->Js.Nullable.toOption,
    typlen: typlen->Js.Nullable.toOption,
    typbyval: typbyval->Js.Nullable.toOption,
    typtype: typtype->Js.Nullable.toOption,
    typcategory: typcategory->Js.Nullable.toOption,
    typispreferred: typispreferred->Js.Nullable.toOption,
    typisdefined: typisdefined->Js.Nullable.toOption,
    typdelim: typdelim->Js.Nullable.toOption,
    typrelid: typrelid->Js.Nullable.toOption,
    typelem: typelem->Js.Nullable.toOption,
    typarray: typarray->Js.Nullable.toOption,
    typnotnull: typnotnull->Js.Nullable.toOption,
    typbasetype: typbasetype->Js.Nullable.toOption,
    typtypmod: typtypmod->Js.Nullable.toOption,
    typndims: typndims->Js.Nullable.toOption,
    typcollation: typcollation->Js.Nullable.toOption,
    typdefault: typdefault->Js.Nullable.toOption,
    rngsubtype: rngsubtype->Js.Nullable.toOption,
    attr_names: attr_names->Js.Nullable.toOption,
    attr_types: attr_types->Js.Nullable.toOption,
    enum_labels: enum_labels->Js.Nullable.toOption,
  }
  let runRaw = (client, parameters: parametersRecord): Js.Promise.t<Pg.QueryResult.t<row>> =>
    client->Pg.queryConf(
      Pg.QueryConfig.make(
        ~text=statement,
        ~rowMode=#array,
        ~values=parameters->convertParameters,
        (),
      ),
    )
  let run = (client, parameters) =>
    runRaw(client, parameters)->Js.Promise.then_(
      (res: Pg.QueryResult.t<row>) => Js.Promise.resolve(res.rows->Js.Array2.map(convertRow)),
      _,
    )
}

// -- @getAttributes
// select
//   a.attrelid,
//   a.attnum,
//   a.attrelid::regclass relname,
//   a.attname,
//   a.atttypid,
//   a.attndims,
//   a.atttypmod,
//   a.attnotnull,
//   a.attcollation,
//   a.attoptions,
//   a.attfdwoptions
// from pg_catalog.pg_attribute a where attrelid = ANY ($relIds::int[])
module GetAttributes = {
  let statement = "-- @getAttributes\nselect\n  a.attrelid,\n  a.attnum,\n  a.attrelid::regclass relname,\n  a.attname,\n  a.atttypid,\n  a.attndims,\n  a.atttypmod,\n  a.attnotnull,\n  a.attcollation,\n  a.attoptions,\n  a.attfdwoptions\nfrom pg_catalog.pg_attribute a where attrelid = ANY ($1::int[])"
  type parameters = array<Pg_catalog._int4>
  type parametersRecord = {relIds: Pg_catalog._int4}
  type row = (
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.int2>,
    Js.Nullable.t<Pg_catalog.regclass>,
    Js.Nullable.t<Pg_catalog.name>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog.int4>,
    Js.Nullable.t<Pg_catalog.int4>,
    Js.Nullable.t<Pg_catalog.bool_>,
    Js.Nullable.t<Pg_catalog.oid>,
    Js.Nullable.t<Pg_catalog._text>,
    Js.Nullable.t<Pg_catalog._text>,
  )
  type rowRecord = {
    attrelid: option<Pg_catalog.oid>,
    attnum: option<Pg_catalog.int2>,
    relname: option<Pg_catalog.regclass>,
    attname: option<Pg_catalog.name>,
    atttypid: option<Pg_catalog.oid>,
    attndims: option<Pg_catalog.int4>,
    atttypmod: option<Pg_catalog.int4>,
    attnotnull: option<Pg_catalog.bool_>,
    attcollation: option<Pg_catalog.oid>,
    attoptions: option<Pg_catalog._text>,
    attfdwoptions: option<Pg_catalog._text>,
  }
  let convertParameters = (r: parametersRecord): parameters => [r.relIds]
  let convertRow = (
    (
      attrelid,
      attnum,
      relname,
      attname,
      atttypid,
      attndims,
      atttypmod,
      attnotnull,
      attcollation,
      attoptions,
      attfdwoptions,
    ): row,
  ): rowRecord => {
    attrelid: attrelid->Js.Nullable.toOption,
    attnum: attnum->Js.Nullable.toOption,
    relname: relname->Js.Nullable.toOption,
    attname: attname->Js.Nullable.toOption,
    atttypid: atttypid->Js.Nullable.toOption,
    attndims: attndims->Js.Nullable.toOption,
    atttypmod: atttypmod->Js.Nullable.toOption,
    attnotnull: attnotnull->Js.Nullable.toOption,
    attcollation: attcollation->Js.Nullable.toOption,
    attoptions: attoptions->Js.Nullable.toOption,
    attfdwoptions: attfdwoptions->Js.Nullable.toOption,
  }
  let runRaw = (client, parameters: parametersRecord): Js.Promise.t<Pg.QueryResult.t<row>> =>
    client->Pg.queryConf(
      Pg.QueryConfig.make(
        ~text=statement,
        ~rowMode=#array,
        ~values=parameters->convertParameters,
        (),
      ),
    )
  let run = (client, parameters) =>
    runRaw(client, parameters)->Js.Promise.then_(
      (res: Pg.QueryResult.t<row>) => Js.Promise.resolve(res.rows->Js.Array2.map(convertRow)),
      _,
    )
}
