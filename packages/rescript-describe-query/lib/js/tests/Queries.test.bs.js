// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("rescript-jest/lib/js/Jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("@rpominov/rescript-promise/lib/js/Promise.bs.js");
var LogError = require("@typesafe-sql/rescript-common/lib/js/src/LogError.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Client$DescribeQuery = require("../Client.bs.js");

function $$then(promise, fn) {
  return promise.then(Curry.__1(fn));
}

var client = {
  contents: undefined
};

beforeAll(function () {
      var promise = Client$DescribeQuery.make(undefined, undefined);
      return promise.then(function (result) {
                  if (result.TAG === /* Ok */0) {
                    client.contents = Caml_option.some(result._0);
                    return $$Promise.resolve(undefined);
                  }
                  var e = result._0;
                  LogError.log(e);
                  return $$Promise.reject(e.originalExn);
                });
    });

afterAll(function () {
      return Client$DescribeQuery.terminate(Belt_Option.getExn(client.contents));
    });

Jest.eachAsync([
      "SELECT 1",
      "SELECT oid FROM pg_type"
    ], "Describe: %s", (function (query) {
        expect.assertions(1);
        var promise = Client$DescribeQuery.describe(Belt_Option.getExn(client.contents), query);
        return promise.then(function (description) {
                    expect(description).toMatchSnapshot();
                    return Promise.resolve(undefined);
                  });
      }));

test("tableColumn", (function () {
        expect.assertions(1);
        var promise = Client$DescribeQuery.describe(Belt_Option.getExn(client.contents), "SELECT oid FROM pg_type");
        return promise.then(function (description) {
                    var column = Belt_Option.getExn(Belt_Array.getExn(Belt_Option.getExn(description.row), 0).tableColumn);
                    expect(column).toEqual({
                          attrelid: 1247,
                          attnum: 1,
                          relname: "pg_type",
                          attname: "oid",
                          atttypid: 26,
                          attndims: 0,
                          atttypmod: -1,
                          attnotnull: true,
                          attcollation: 0,
                          attoptions: undefined,
                          attfdwoptions: undefined
                        });
                    return Promise.resolve(undefined);
                  });
      }));

exports.$$then = $$then;
exports.client = client;
/*  Not a pure module */
