// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("rescript-jest/lib/js/Jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Client$DescribeQuery = require("../Client.bs.js");

function $$then(promise, fn) {
  return promise.then(Curry.__1(fn));
}

function $$catch(promise, cb) {
  return promise.then(function (param) {
                return Promise.resolve(undefined);
              }).catch(function (err) {
              Curry._1(cb, err);
              return Promise.resolve(undefined);
            });
}

test("Fatal error propagates to all requests in the queue", (function () {
        expect.assertions(1);
        var promise = Client$DescribeQuery.make(undefined, undefined);
        return promise.then(function (result) {
                    var client = Jest.getOkExn(result, "File \"Errors.test.res\", line 14, characters 34-41");
                    var all = Promise.all([
                          $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                  
                                })),
                          $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                  
                                })),
                          $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (err) {
                                  expect(err).toMatchSnapshot();
                                  
                                }))
                        ]);
                    var promise = Client$DescribeQuery.terminate(client);
                    return promise.then(function (param) {
                                return all.then(function (param) {
                                            return Promise.resolve(undefined);
                                          });
                              });
                  });
      }));

test("Requests fail after termination", (function () {
        expect.assertions(1);
        var promise = Client$DescribeQuery.make(undefined, undefined);
        return promise.then(function (result) {
                    var client = Jest.getOkExn(result, "File \"Errors.test.res\", line 34, characters 34-41");
                    var promise = Client$DescribeQuery.terminate(client);
                    return promise.then(function (param) {
                                var promise = Client$DescribeQuery.describe(client, "SELECT 1");
                                return promise.then(function (param) {
                                              return Promise.resolve(undefined);
                                            }).catch(function (err) {
                                            expect(err).toMatchSnapshot();
                                            return Promise.resolve(undefined);
                                          });
                              });
                  });
      }));

exports.$$then = $$then;
exports.$$catch = $$catch;
/*  Not a pure module */
