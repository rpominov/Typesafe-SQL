// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pg = require("@typesafe-sql/rescript-pg/lib/js/Pg.bs.js");
var Jest = require("rescript-jest/lib/js/Jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("@rpominov/rescript-promise/lib/js/Promise.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Client$DescribeQuery = require("../Client.bs.js");

function $$then(promise, fn) {
  return promise.then(Curry.__1(fn));
}

function $$catch(promise, cb) {
  return promise.then(function (param) {
                return Promise.resolve(undefined);
              }).catch(function (err) {
              Curry._1(cb, err);
              return Promise.resolve(undefined);
            });
}

Jest.eachAsync([
      "ASC",
      "DESC"
    ], "Fatal error propagates to all requests in the queue (%s)", (function (orderDir) {
        expect.assertions(1);
        var appName = "errors_propagation_test";
        var all = {
          contents: undefined
        };
        var pgClient = Pg.Client.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
        var promise = pgClient.connect();
        var promise$1 = promise.then(function (param) {
              var promise = Client$DescribeQuery.make({
                    application_name: appName
                  }, undefined, undefined);
              return promise.then(function (result) {
                          var client = Jest.getOkExn(result, "File \"Errors.test.res\", line 22, characters 36-43");
                          all.contents = Caml_option.some(Promise.all([
                                    $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                            
                                          })),
                                    $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                            
                                          })),
                                    $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                            
                                          })),
                                    $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                            
                                          })),
                                    $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (err) {
                                            expect([
                                                    "Connection terminated unexpectedly",
                                                    "terminating connection due to administrator command"
                                                  ]).toContain(Jest.getExn(err.message, "File \"Errors.test.res\", line 36, characters 65-72"));
                                            
                                          }))
                                  ]));
                          return Promise.resolve(undefined);
                        });
            });
        var promise$2 = promise$1.then(function (param) {
              return Pg.query(pgClient, [appName], "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE application_name = $1 ORDER BY backend_start " + orderDir + " LIMIT 1");
            });
        var promise$3 = promise$2.then(function (param) {
              return pgClient.end();
            });
        var promise$4 = promise$3.then(function (param) {
              return Jest.getExn(all.contents, "File \"Errors.test.res\", line 50, characters 35-42");
            });
        return promise$4.then(function (param) {
                    return $$Promise.resolve(undefined);
                  });
      }));

test("All requests in the queue get rejected when client is terminated", (function () {
        expect.assertions(1);
        var promise = Client$DescribeQuery.make(undefined, undefined, undefined);
        return promise.then(function (result) {
                    var client = Jest.getOkExn(result, "File \"Errors.test.res\", line 58, characters 34-41");
                    var all = Promise.all([
                          $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                  
                                })),
                          $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (param) {
                                  
                                })),
                          $$catch(Client$DescribeQuery.describe(client, "SELECT 1"), (function (err) {
                                  expect(err).toMatchSnapshot();
                                  
                                }))
                        ]);
                    var promise = Client$DescribeQuery.terminate(client);
                    var promise$1 = promise.then(function (param) {
                          return all;
                        });
                    return promise$1.then(function (param) {
                                return Promise.resolve(undefined);
                              });
                  });
      }));

test("Non fatal errors don't propagate", (function () {
        expect.assertions(2);
        var promise = Client$DescribeQuery.make(undefined, undefined, undefined);
        return promise.then(function (result) {
                    var client = Jest.getOkExn(result, "File \"Errors.test.res\", line 74, characters 34-41");
                    var promise = Promise.all([
                          Client$DescribeQuery.describe(client, "SELECT 1"),
                          $$catch(Client$DescribeQuery.describe(client, "SELEC 1"), (function (err) {
                                  expect(err).toMatchSnapshot();
                                  
                                })),
                          Client$DescribeQuery.describe(client, "SELECT 1")
                        ]);
                    return promise.then(function (param) {
                                expect(param[2]).toMatchSnapshot();
                                return Client$DescribeQuery.terminate(client);
                              });
                  });
      }));

test("Requests fail after termination", (function () {
        expect.assertions(1);
        var promise = Client$DescribeQuery.make(undefined, undefined, undefined);
        return promise.then(function (result) {
                    var client = Jest.getOkExn(result, "File \"Errors.test.res\", line 91, characters 34-41");
                    var promise = Client$DescribeQuery.terminate(client);
                    return promise.then(function (param) {
                                var promise = Client$DescribeQuery.describe(client, "SELECT 1");
                                return promise.then(function (param) {
                                              return Promise.resolve(undefined);
                                            }).catch(function (err) {
                                            expect(err).toMatchSnapshot();
                                            return Promise.resolve(undefined);
                                          });
                              });
                  });
      }));

exports.$$then = $$then;
exports.$$catch = $$catch;
/*  Not a pure module */
