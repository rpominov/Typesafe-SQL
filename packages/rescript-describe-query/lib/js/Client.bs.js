// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pg = require("pg");
var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Loader = require("@typesafe-sql/rescript-common/lib/js/src/Loader.bs.js");
var $$Promise = require("@rpominov/rescript-promise/lib/js/Promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Loggable$Errors = require("@typesafe-sql/rescript-errors/lib/js/Loggable.bs.js");
var Queries$DescribeQuery = require("./Queries.bs.js");
var DescribeQueryBasic = require("@typesafe-sql/describe-query-basic");

function exn(opt, loc) {
  if (opt !== undefined) {
    return Caml_option.valFromOption(opt);
  } else {
    return Js_exn.raiseError("Unexpected None at: " + loc);
  }
}

function terminate(client) {
  client.terminating = true;
  var promise = client.terminationResult;
  if (promise !== undefined) {
    return Caml_option.valFromOption(promise);
  }
  var promise$1 = $$Promise.map($$Promise.all2([
            client.basicClient.terminate(),
            client.pgClient.end()
          ]), (function (param) {
          var match = client.onUnexpectedTerminationCb;
          var match$1 = client.fatalError;
          if (match !== undefined && match$1 !== undefined) {
            return Curry._1(match, Caml_option.valFromOption(match$1));
          }
          
        }));
  client.terminationResult = Caml_option.some(promise$1);
  return promise$1;
}

function make(pgConfig, onUnexpectedTermination, param) {
  var config = pgConfig !== undefined ? Caml_option.valFromOption(pgConfig) : ({});
  var pgClient = new Pg.Client(config);
  var clientRef = {
    contents: undefined
  };
  var onFatalError = function (error) {
    var client = clientRef.contents;
    if (client === undefined) {
      return Js_exn.raiseError("A fatal error received before describe query client has beed initalised");
    }
    var match = client.fatalError;
    if (match !== undefined) {
      return ;
    } else {
      client.fatalError = Caml_option.some(error);
      terminate(client);
      return ;
    }
  };
  var onEnd = function (param) {
    var client = clientRef.contents;
    var terminating = client !== undefined ? client.terminating : false;
    if (!terminating) {
      return onFatalError($$Promise.makeJsError("Postgres client's connection has been terminated unexpectedly, without a error"));
    }
    
  };
  pgClient.once("error", onFatalError).once("end", onEnd);
  return $$Promise.mapOk($$Promise.chainOk($$Promise.$$catch(pgClient.connect(), (function (exn) {
                        return Loggable$Errors.annotate(Loggable$Errors.fromExn(exn), "Failed to connect to node-postgres client");
                      })), (function (param) {
                    return $$Promise.$$catch(DescribeQueryBasic.createClient(config, onFatalError), (function (exn) {
                                  return Loggable$Errors.annotate(Loggable$Errors.fromExn(exn), "Failed to connect to describe-query-basic client");
                                }));
                  })), (function (basicClient) {
                var client = {
                  pgClient: pgClient,
                  basicClient: basicClient,
                  typesLoader: Loader.make((function (keys) {
                          return Queries$DescribeQuery.GetTypes.run(pgClient, {
                                      typeIds: keys
                                    });
                        }), (function (prim) {
                          return prim.toString();
                        }), (function (row) {
                          return exn(row.oid, "File \"Client.res\", line 115, characters 28-35").toString();
                        })),
                  fieldsLoader: Loader.make((function (keys) {
                          return Queries$DescribeQuery.GetAttributes.run(pgClient, {
                                      relIds: keys.map(function (prim) {
                                            return prim[0];
                                          })
                                    });
                        }), (function (param) {
                          return [
                                    param[0],
                                    param[1]
                                  ].join("|");
                        }), (function (row) {
                          return [
                                    exn(row.attrelid, "File \"Client.res\", line 120, characters 34-41"),
                                    exn(row.attnum, "File \"Client.res\", line 120, characters 60-67")
                                  ].join("|");
                        })),
                  onUnexpectedTerminationCb: onUnexpectedTermination,
                  terminating: false,
                  terminationResult: undefined,
                  fatalError: undefined
                };
                clientRef.contents = client;
                return {
                        TAG: /* Ok */0,
                        _0: client
                      };
              }));
}

function getBaseInfo(dataType) {
  switch (dataType.TAG | 0) {
    case /* Pseudo */0 :
    case /* Base */1 :
        return dataType._0;
    default:
      var obj = dataType._0;
      return {
              oid: obj.oid,
              name: obj.name,
              namespace: obj.namespace,
              len: obj.len,
              byVal: obj.byVal,
              typeType: obj.typeType,
              category: obj.category,
              isPreferred: obj.isPreferred,
              isDefined: obj.isDefined
            };
  }
}

function checkForFatal(promise, client) {
  return $$Promise.chain($$Promise.$$catch(promise, (function (err) {
                    return err;
                  })), (function (param) {
                var match = client.fatalError;
                var match$1 = client.terminationResult;
                if (match !== undefined) {
                  return $$Promise.reject(Caml_option.valFromOption(match));
                } else if (match$1 !== undefined) {
                  return Js_exn.raiseError("The describe-query client has been terminated by the user");
                } else {
                  return promise;
                }
              }));
}

function loadAll(items, loadItem) {
  return $$Promise.all(items.map(Curry.__1(loadItem)));
}

function loadType(client, oid) {
  return $$Promise.chain(checkForFatal($$Promise.resolve(undefined), client), (function (param) {
                return $$Promise.chain(checkForFatal(Loader.get(client.typesLoader, oid), client), (function (opt) {
                              if (opt === undefined) {
                                return Js_exn.raiseError("Data type with oid " + oid + " not found");
                              }
                              var x = exn(opt.typtype, "File \"Client.res\", line 234, characters 50-57");
                              var typeType;
                              switch (x) {
                                case "b" :
                                    typeType = "b";
                                    break;
                                case "c" :
                                    typeType = "c";
                                    break;
                                case "d" :
                                    typeType = "d";
                                    break;
                                case "e" :
                                    typeType = "e";
                                    break;
                                case "m" :
                                    typeType = "m";
                                    break;
                                case "p" :
                                    typeType = "p";
                                    break;
                                case "r" :
                                    typeType = "r";
                                    break;
                                default:
                                  typeType = Js_exn.raiseError("Unexpected value of pg_type.typtype: " + x);
                              }
                              var x$1 = exn(opt.typcategory, "File \"Client.res\", line 245, characters 54-61");
                              var category;
                              switch (x$1) {
                                case "A" :
                                    category = "A";
                                    break;
                                case "B" :
                                    category = "B";
                                    break;
                                case "C" :
                                    category = "C";
                                    break;
                                case "D" :
                                    category = "D";
                                    break;
                                case "E" :
                                    category = "E";
                                    break;
                                case "G" :
                                    category = "G";
                                    break;
                                case "I" :
                                    category = "I";
                                    break;
                                case "N" :
                                    category = "N";
                                    break;
                                case "P" :
                                    category = "P";
                                    break;
                                case "R" :
                                    category = "R";
                                    break;
                                case "S" :
                                    category = "S";
                                    break;
                                case "T" :
                                    category = "T";
                                    break;
                                case "U" :
                                    category = "U";
                                    break;
                                case "V" :
                                    category = "V";
                                    break;
                                case "X" :
                                    category = "X";
                                    break;
                                default:
                                  category = Js_exn.raiseError("Unexpected value of pg_type.typcategory: " + x$1);
                              }
                              var byVal = exn(opt.typbyval, "File \"Client.res\", line 264, characters 41-48");
                              var oid$1 = exn(opt.oid, "File \"Client.res\", line 265, characters 34-41");
                              var name = exn(opt.typname, "File \"Client.res\", line 266, characters 39-46");
                              var namespace = exn(opt.typnamespace, "File \"Client.res\", line 267, characters 49-56");
                              var len = exn(opt.typlen, "File \"Client.res\", line 268, characters 37-44");
                              var isPreferred = exn(opt.typispreferred, "File \"Client.res\", line 269, characters 53-60");
                              var isDefined = exn(opt.typisdefined, "File \"Client.res\", line 270, characters 49-56");
                              if (typeType === "c") {
                                return $$Promise.map(checkForFatal(loadAll(exn(opt.attr_types, "File \"Client.res\", line 358, characters 18-25"), (function (oid) {
                                                      return loadType(client, oid);
                                                    })), client), (function (dataTypes) {
                                              return {
                                                      TAG: /* Composite */6,
                                                      _0: {
                                                        typeType: typeType,
                                                        category: category,
                                                        byVal: byVal,
                                                        oid: oid$1,
                                                        name: name,
                                                        namespace: namespace,
                                                        len: len,
                                                        isPreferred: isPreferred,
                                                        isDefined: isDefined,
                                                        fields: Belt_Array.zip(exn(opt.attr_names, "File \"Client.res\", line 371, characters 60-67"), dataTypes)
                                                      }
                                                    };
                                            }));
                              } else if (typeType === "d") {
                                return $$Promise.map(checkForFatal(loadType(client, exn(opt.typbasetype, "File \"Client.res\", line 374, characters 51-58")), client), (function (baseType) {
                                              return {
                                                      TAG: /* Domain */7,
                                                      _0: {
                                                        typeType: typeType,
                                                        category: category,
                                                        byVal: byVal,
                                                        oid: oid$1,
                                                        name: name,
                                                        namespace: namespace,
                                                        len: len,
                                                        isPreferred: isPreferred,
                                                        isDefined: isDefined,
                                                        baseType: baseType,
                                                        notNull: exn(opt.typnotnull, "File \"Client.res\", line 387, characters 46-53"),
                                                        nDims: exn(opt.typndims, "File \"Client.res\", line 388, characters 42-49"),
                                                        default: opt.typdefault,
                                                        typmod: exn(opt.typtypmod, "File \"Client.res\", line 390, characters 44-51"),
                                                        collation: exn(opt.typcollation, "File \"Client.res\", line 391, characters 50-57")
                                                      }
                                                    };
                                            }));
                              } else if (typeType === "e") {
                                return $$Promise.resolve({
                                            TAG: /* Enum */3,
                                            _0: {
                                              typeType: typeType,
                                              category: category,
                                              byVal: byVal,
                                              oid: oid$1,
                                              name: name,
                                              namespace: namespace,
                                              len: len,
                                              isPreferred: isPreferred,
                                              isDefined: isDefined,
                                              enumValues: exn(opt.enum_labels, "File \"Client.res\", line 354, characters 50-57")
                                            }
                                          });
                              } else if (typeType === "m") {
                                return $$Promise.map(checkForFatal(loadType(client, exn(opt.rngsubtype, "File \"Client.res\", line 329, characters 50-57")), client), (function (elemType) {
                                              return {
                                                      TAG: /* MultiRange */5,
                                                      _0: {
                                                        typeType: typeType,
                                                        category: category,
                                                        byVal: byVal,
                                                        oid: oid$1,
                                                        name: name,
                                                        namespace: namespace,
                                                        len: len,
                                                        isPreferred: isPreferred,
                                                        isDefined: isDefined,
                                                        elemType: elemType
                                                      }
                                                    };
                                            }));
                              } else if (typeType === "p") {
                                return $$Promise.resolve({
                                            TAG: /* Pseudo */0,
                                            _0: {
                                              typeType: typeType,
                                              category: category,
                                              byVal: byVal,
                                              oid: oid$1,
                                              name: name,
                                              namespace: namespace,
                                              len: len,
                                              isPreferred: isPreferred,
                                              isDefined: isDefined
                                            }
                                          });
                              } else if (typeType === "r") {
                                return $$Promise.map(checkForFatal(loadType(client, exn(opt.rngsubtype, "File \"Client.res\", line 314, characters 50-57")), client), (function (elemType) {
                                              return {
                                                      TAG: /* Range */4,
                                                      _0: {
                                                        typeType: typeType,
                                                        category: category,
                                                        byVal: byVal,
                                                        oid: oid$1,
                                                        name: name,
                                                        namespace: namespace,
                                                        len: len,
                                                        isPreferred: isPreferred,
                                                        isDefined: isDefined,
                                                        elemType: elemType
                                                      }
                                                    };
                                            }));
                              } else if (category === "A") {
                                return $$Promise.map(checkForFatal(loadType(client, exn(opt.typelem, "File \"Client.res\", line 274, characters 47-54")), client), (function (elemType) {
                                              return {
                                                      TAG: /* Array */2,
                                                      _0: {
                                                        typeType: typeType,
                                                        category: category,
                                                        byVal: byVal,
                                                        oid: oid$1,
                                                        name: name,
                                                        namespace: namespace,
                                                        len: len,
                                                        isPreferred: isPreferred,
                                                        isDefined: isDefined,
                                                        delim: exn(opt.typdelim, "File \"Client.res\", line 286, characters 42-49"),
                                                        elemType: elemType
                                                      }
                                                    };
                                            }));
                              } else {
                                return $$Promise.resolve({
                                            TAG: /* Base */1,
                                            _0: {
                                              typeType: typeType,
                                              category: category,
                                              byVal: byVal,
                                              oid: oid$1,
                                              name: name,
                                              namespace: namespace,
                                              len: len,
                                              isPreferred: isPreferred,
                                              isDefined: isDefined
                                            }
                                          });
                              }
                            }));
              }));
}

function describe(client, query) {
  return $$Promise.mapOk($$Promise.$$catch($$Promise.chain(checkForFatal($$Promise.resolve(undefined), client), (function (param) {
                        return $$Promise.chainOk(checkForFatal($$Promise.$$catch(client.basicClient.describe(query), Loggable$Errors.fromExn), client), (function (description) {
                                      var parametersTypes = loadAll(description.parameters, (function (id) {
                                              return loadType(client, id);
                                            }));
                                      var fieldsTypes = loadAll(Belt_Option.getWithDefault(description.row, []), (function (x) {
                                              return loadType(client, x.dataTypeID);
                                            }));
                                      var tableColums = loadAll(Belt_Option.getWithDefault(description.row, []), (function (x) {
                                              return Loader.get(client.fieldsLoader, [
                                                          x.tableID,
                                                          x.columnID
                                                        ]);
                                            }));
                                      return $$Promise.mapOk(checkForFatal($$Promise.$$catch($$Promise.all3([
                                                              parametersTypes,
                                                              fieldsTypes,
                                                              tableColums
                                                            ]), Loggable$Errors.fromExn), client), (function (param) {
                                                    var row = description.row;
                                                    return {
                                                            TAG: /* Ok */0,
                                                            _0: {
                                                              parameters: param[0],
                                                              row: row !== undefined ? Belt_Array.zip(Belt_Array.zip(row, param[1]), param[2]).map(function (param) {
                                                                      var match = param[0];
                                                                      return {
                                                                              name: match[0].name,
                                                                              dataType: match[1],
                                                                              tableColumn: param[1]
                                                                            };
                                                                    }) : undefined
                                                            }
                                                          };
                                                  }));
                                    }));
                      })), Loggable$Errors.fromExn), (function (x) {
                return x;
              }));
}

exports.make = make;
exports.terminate = terminate;
exports.getBaseInfo = getBaseInfo;
exports.describe = describe;
/* pg Not a pure module */
