// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");

var statement = "-- @getTypes\nselect\n  t.oid,\n  t.typname,\n  t.typnamespace::regnamespace,\n  t.typlen,\n  t.typbyval,\n  t.typtype,\n  t.typcategory,\n  t.typispreferred,\n  t.typisdefined,\n  t.typdelim,\n  t.typrelid,\n  t.typelem,\n  t.typarray,\n  t.typnotnull,\n  t.typbasetype,\n  t.typtypmod,\n  t.typndims,\n  t.typcollation,\n  t.typdefault,\n  r.rngsubtype,\n  (select array_agg(a.attname::text order by a.attnum) \n    from pg_attribute a \n    where a.attrelid = t.typrelid \n    and a.attisdropped = false\n    and a.attnum >= 0) as attr_names,\n  (select array_agg(a.atttypid order by a.attnum) \n    from pg_attribute a where a.attrelid = t.typrelid \n    and a.attisdropped = false\n    and a.attnum >= 0) as attr_types,\n  (select array_agg(e.enumlabel::text order by e.enumsortorder)\n    from pg_enum e where e.enumtypid = t.oid) as enum_labels\nfrom pg_type t\nleft join pg_range r on r.rngtypid = t.oid\nwhere t.oid = ANY ($1::int[])";

function convertParameters(r) {
  return [r.typeIds];
}

function convertRow(param) {
  return {
          oid: Caml_option.nullable_to_opt(param[0]),
          typname: Caml_option.nullable_to_opt(param[1]),
          typnamespace: Caml_option.nullable_to_opt(param[2]),
          typlen: Caml_option.nullable_to_opt(param[3]),
          typbyval: Caml_option.nullable_to_opt(param[4]),
          typtype: Caml_option.nullable_to_opt(param[5]),
          typcategory: Caml_option.nullable_to_opt(param[6]),
          typispreferred: Caml_option.nullable_to_opt(param[7]),
          typisdefined: Caml_option.nullable_to_opt(param[8]),
          typdelim: Caml_option.nullable_to_opt(param[9]),
          typrelid: Caml_option.nullable_to_opt(param[10]),
          typelem: Caml_option.nullable_to_opt(param[11]),
          typarray: Caml_option.nullable_to_opt(param[12]),
          typnotnull: Caml_option.nullable_to_opt(param[13]),
          typbasetype: Caml_option.nullable_to_opt(param[14]),
          typtypmod: Caml_option.nullable_to_opt(param[15]),
          typndims: Caml_option.nullable_to_opt(param[16]),
          typcollation: Caml_option.nullable_to_opt(param[17]),
          typdefault: Caml_option.nullable_to_opt(param[18]),
          rngsubtype: Caml_option.nullable_to_opt(param[19]),
          attr_names: Caml_option.nullable_to_opt(param[20]),
          attr_types: Caml_option.nullable_to_opt(param[21]),
          enum_labels: Caml_option.nullable_to_opt(param[22])
        };
}

function runRaw(client, parameters) {
  return client.query({
              values: [parameters.typeIds],
              rowMode: "array",
              text: statement
            });
}

function run(client, parameters) {
  var __x = runRaw(client, parameters);
  return __x.then(function (res) {
              return Promise.resolve(res.rows.map(convertRow));
            });
}

var GetTypes = {
  statement: statement,
  convertParameters: convertParameters,
  convertRow: convertRow,
  runRaw: runRaw,
  run: run
};

var statement$1 = "-- @getAttributes\nselect\n  a.attrelid,\n  a.attnum,\n  a.attrelid::regclass relname,\n  a.attname,\n  a.atttypid,\n  a.attndims,\n  a.atttypmod,\n  a.attnotnull,\n  a.attcollation,\n  a.attoptions,\n  a.attfdwoptions\nfrom pg_catalog.pg_attribute a where attrelid = ANY ($1::int[])";

function convertParameters$1(r) {
  return [r.relIds];
}

function convertRow$1(param) {
  return {
          attrelid: Caml_option.nullable_to_opt(param[0]),
          attnum: Caml_option.nullable_to_opt(param[1]),
          relname: Caml_option.nullable_to_opt(param[2]),
          attname: Caml_option.nullable_to_opt(param[3]),
          atttypid: Caml_option.nullable_to_opt(param[4]),
          attndims: Caml_option.nullable_to_opt(param[5]),
          atttypmod: Caml_option.nullable_to_opt(param[6]),
          attnotnull: Caml_option.nullable_to_opt(param[7]),
          attcollation: Caml_option.nullable_to_opt(param[8]),
          attoptions: Caml_option.nullable_to_opt(param[9]),
          attfdwoptions: Caml_option.nullable_to_opt(param[10])
        };
}

function runRaw$1(client, parameters) {
  return client.query({
              values: [parameters.relIds],
              rowMode: "array",
              text: statement$1
            });
}

function run$1(client, parameters) {
  var __x = runRaw$1(client, parameters);
  return __x.then(function (res) {
              return Promise.resolve(res.rows.map(convertRow$1));
            });
}

var GetAttributes = {
  statement: statement$1,
  convertParameters: convertParameters$1,
  convertRow: convertRow$1,
  runRaw: runRaw$1,
  run: run$1
};

exports.GetTypes = GetTypes;
exports.GetAttributes = GetAttributes;
/* No side effect */
