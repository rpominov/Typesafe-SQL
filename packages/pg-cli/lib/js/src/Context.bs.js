// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var GeneratorInputData = {};

function quiet(ctx) {
  if (ctx.argv.quiet) {
    return true;
  } else {
    return ctx.config.quiet === true;
  }
}

function sources(ctx) {
  var match = ctx.argv.input;
  var match$1 = ctx.config.sources;
  if (match !== undefined) {
    return [{
              input: [match],
              output: ctx.argv.output
            }];
  } else if (match$1 !== undefined && match$1.length !== 0) {
    return match$1;
  } else {
    return ;
  }
}

function orElse(a, b) {
  if (a !== undefined) {
    return a;
  } else {
    return b;
  }
}

function generator(ctx) {
  return orElse(ctx.argv.generator, ctx.config.generator);
}

function pgConfig(ctx) {
  var tmp = {
    application_name: "typesafe-pg"
  };
  var tmp$1 = orElse(ctx.argv.username, ctx.config.username);
  if (tmp$1 !== undefined) {
    tmp.user = tmp$1;
  }
  var tmp$2 = Belt_Option.map(orElse(ctx.argv.password, ctx.config.password), (function (prim) {
          return prim;
        }));
  if (tmp$2 !== undefined) {
    tmp.password = Caml_option.valFromOption(tmp$2);
  }
  var tmp$3 = orElse(ctx.argv.host, ctx.config.host);
  if (tmp$3 !== undefined) {
    tmp.host = tmp$3;
  }
  var tmp$4 = orElse(ctx.argv.dbname, ctx.config.dbname);
  if (tmp$4 !== undefined) {
    tmp.database = tmp$4;
  }
  var tmp$5 = orElse(ctx.argv.port, ctx.config.port);
  if (tmp$5 !== undefined) {
    tmp.port = tmp$5;
  }
  var tmp$6 = orElse(ctx.argv.connection, ctx.config.connection);
  if (tmp$6 !== undefined) {
    tmp.connectionString = tmp$6;
  }
  return tmp;
}

exports.GeneratorInputData = GeneratorInputData;
exports.quiet = quiet;
exports.sources = sources;
exports.generator = generator;
exports.pgConfig = pgConfig;
/* No side effect */
