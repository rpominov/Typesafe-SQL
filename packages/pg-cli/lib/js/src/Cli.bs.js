// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var Process = require("process");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Fs$Builder = require("./Fs.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var PathRebuild = require("rescript-path-rebuild/lib/js/PathRebuild.bs.js");
var TTY$Builder = require("./TTY.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Loggable$Errors = require("@typesafe-sql/rescript-errors/lib/js/Loggable.bs.js");
var Require$Builder = require("./Require.bs.js");
var Commands$Builder = require("./Commands.bs.js");
var Minimist$Builder = require("./Minimist.bs.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var version = "0.1.0";

var header = "Typesafe SQL CLI for PostgreSQL [ver. " + version + "]\n\nThis is a tool for generating typings for PostgreSQL queries.";

var help = "Usage: typesafe-sql-pg [--version | -v] <command> [--debug | -D] [--quiet | -q]\n       [--input | -i <glob>] [--output | -o <pattern>] [--generator | -g <generator>]\n       [--config | -c <path>] [--host | -h <db-host>] [--port | -p <db-port>]\n       [--username | -U <db-user>] [--password | -W <db-password>]\n       [--dbname | -d <db-database-name>] [--connection | -C <db-connection-string>]\n\ntypesafe-sql-pg build - Generate typings\ntypesafe-sql-pg watch - Generate, and continue updating as the input files change\ntypesafe-sql-pg pipe  - Generate using stdin as the input and output to stdout \n\nExample:\n\n  $ typesafe-sql-pg build \\\n    --connection \"postgres://user:password@host:5432/database\" \\\n    --input \"queries/*.sql\" \\\n    --output \"{dir}/{name}.res\" \\\n    --generator rescript\n       \nFull documentation is available at \nhttps://github.com/rpominov/typesafe-sql/tree/master/packages/pg-cli#readme\n";

var quiet = {
  contents: false
};

function exitWithLoggableError(err) {
  if (!quiet.contents) {
    console.error("ERROR!");
    Loggable$Errors.log(undefined, err);
    console.error("");
    console.error(help);
  }
  return Process.exit(1);
}

var x = Belt_Array.get(Process.argv, 2);

var match = x !== undefined ? (
    x.startsWith("-") ? [
        undefined,
        Process.argv.slice(2)
      ] : [
        x,
        Process.argv.slice(3)
      ]
  ) : [
    undefined,
    []
  ];

var unparsedArgv = match[1];

var command = match[0];

var command$1;

if (command !== undefined) {
  switch (command) {
    case "build" :
        command$1 = "build";
        break;
    case "pipe" :
        command$1 = "pipe";
        break;
    case "watch" :
        command$1 = "watch";
        break;
    default:
      command$1 = exitWithLoggableError(Loggable$Errors.fromText("Unknown command: " + command));
  }
} else {
  command$1 = "help";
}

var InvalidFlag = /* @__PURE__ */Caml_exceptions.create("Cli-Builder.InvalidFlag");

var UnknownParameter = /* @__PURE__ */Caml_exceptions.create("Cli-Builder.UnknownParameter");

var ParameterError = /* @__PURE__ */Caml_exceptions.create("Cli-Builder.ParameterError");

var argv;

try {
  var result = Minimist$Builder.parse([
        "generator",
        "output",
        "input",
        "config",
        "host",
        "port",
        "username",
        "password",
        "dbname",
        "connection"
      ], [
        "version",
        "debug",
        "quiet"
      ], {
        version: "v",
        generator: "g",
        debug: "D",
        input: "i",
        output: "o",
        quiet: "q",
        config: "c",
        host: "h",
        port: "p",
        username: "U",
        password: "W",
        dbname: "d",
        connection: "C"
      }, undefined, true, (function (s) {
          if (!s.startsWith("-")) {
            return true;
          }
          throw {
                RE_EXN_ID: UnknownParameter,
                _1: s,
                Error: new Error()
              };
        }), unparsedArgv);
  var getFlagExn = function (name) {
    var v = Minimist$Builder.get(result, name);
    if (typeof v === "number") {
      throw {
            RE_EXN_ID: InvalidFlag,
            _1: name,
            _2: v,
            Error: new Error()
          };
    }
    switch (v.TAG | 0) {
      case /* Bool */0 :
          return v._0;
      case /* String */1 :
          switch (v._0) {
            case "false" :
                return false;
            case "true" :
                return true;
            default:
              throw {
                    RE_EXN_ID: InvalidFlag,
                    _1: name,
                    _2: v,
                    Error: new Error()
                  };
          }
      case /* Float */2 :
          throw {
                RE_EXN_ID: InvalidFlag,
                _1: name,
                _2: v,
                Error: new Error()
              };
      
    }
  };
  var getParam = function (name) {
    var val = Minimist$Builder.get(result, name);
    if (typeof val === "number" || val.TAG !== /* String */1) {
      return ;
    } else {
      return val._0;
    }
  };
  quiet.contents = getFlagExn("quiet");
  if (unparsedArgv.includes("--")) {
    throw {
          RE_EXN_ID: UnknownParameter,
          _1: "--",
          Error: new Error()
        };
  }
  var arr = result._;
  if (arr.length !== 0) {
    throw {
          RE_EXN_ID: UnknownParameter,
          _1: arr[0],
          Error: new Error()
        };
  }
  var str = getParam("output");
  var tmp;
  if (str !== undefined) {
    if (str === "") {
      throw {
            RE_EXN_ID: ParameterError,
            _1: "output",
            _2: "It cannot be an empty string.",
            Error: new Error()
          };
    }
    var fn = PathRebuild.make(str);
    if (fn.TAG === /* Ok */0) {
      tmp = fn._0;
    } else {
      throw {
            RE_EXN_ID: ParameterError,
            _1: "output",
            _2: fn._0,
            Error: new Error()
          };
    }
  } else {
    tmp = undefined;
  }
  argv = {
    version: getFlagExn("version"),
    debug: getFlagExn("debug"),
    quiet: getFlagExn("quiet"),
    generator: getParam("generator"),
    input: getParam("input"),
    output: tmp,
    config: getParam("config"),
    host: getParam("host"),
    port: getParam("port"),
    username: getParam("username"),
    password: getParam("password"),
    dbname: getParam("dbname"),
    connection: getParam("connection")
  };
}
catch (raw_name){
  var name = Caml_js_exceptions.internalToOCamlException(raw_name);
  if (name.RE_EXN_ID === UnknownParameter) {
    argv = exitWithLoggableError(Loggable$Errors.fromText("Unknown argument: " + name._1));
  } else if (name.RE_EXN_ID === InvalidFlag) {
    var str$1 = name._2;
    var name$1 = name._1;
    if (typeof str$1 === "number") {
      argv = exitWithLoggableError(Loggable$Errors.fromText("Invalid --" + name$1 + " value. A boolen flag can have values true/false or no value."));
    } else {
      switch (str$1.TAG | 0) {
        case /* Bool */0 :
            argv = exitWithLoggableError(Loggable$Errors.fromText("Invalid --" + name$1 + " value. A boolen flag can have values true/false or no value."));
            break;
        case /* String */1 :
            argv = exitWithLoggableError(Loggable$Errors.fromText("Invalid --" + name$1 + " value. A boolen flag can have values true/false or no value, got: " + str$1._0));
            break;
        case /* Float */2 :
            var err = "Invalid --" + name$1 + " value. A boolen flag can have values true/false or no value, got: " + str$1._0.toString();
            argv = exitWithLoggableError(Loggable$Errors.fromText(err));
            break;
        
      }
    }
  } else if (name.RE_EXN_ID === ParameterError) {
    argv = exitWithLoggableError(Loggable$Errors.fromText("Invalid --" + name._1 + " value. " + name._2));
  } else {
    throw name;
  }
}

if (argv.version) {
  console.log(version);
} else {
  var loadConfig = function (path) {
    var tmp;
    try {
      if (Fs.existsSync(path)) {
        var match = Fs$Builder.Stat.getType(path);
        if (match === "file") {
          var match$1 = Path.extname(path);
          switch (match$1) {
            case ".js" :
            case ".json" :
                tmp = {
                  TAG: /* Ok */0,
                  _0: Caml_option.some(require(Fs$Builder.makeAbsolute(path)))
                };
                break;
            default:
              tmp = {
                TAG: /* Error */1,
                _0: Loggable$Errors.fromText("Must be a .json or a .js file")
              };
          }
        } else {
          tmp = {
            TAG: /* Error */1,
            _0: Loggable$Errors.fromText("Not a file")
          };
        }
      } else {
        tmp = {
          TAG: /* Ok */0,
          _0: undefined
        };
      }
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      tmp = {
        TAG: /* Error */1,
        _0: Loggable$Errors.fromExnVerbose(exn)
      };
    }
    return [
            path,
            tmp
          ];
  };
  var path = argv.config;
  var match$1;
  if (path !== undefined) {
    var res = loadConfig(path);
    var match$2 = res[1];
    match$1 = match$2.TAG === /* Ok */0 && match$2._0 === undefined ? [
        res[0],
        {
          TAG: /* Error */1,
          _0: Loggable$Errors.fromText("File doesn't exist")
        }
      ] : res;
  } else {
    var res$1 = loadConfig("./typesafe-sql-pg.config.json");
    var match$3 = res$1[1];
    if (match$3.TAG === /* Ok */0 && match$3._0 === undefined) {
      var res$2 = loadConfig("./typesafe-sql-pg.config.js");
      var match$4 = res$2[1];
      if (match$4.TAG === /* Ok */0 && match$4._0 === undefined) {
        var res$3 = loadConfig("./package.json");
        var match$5 = res$3[1];
        if (match$5.TAG === /* Ok */0) {
          var obj = match$5._0;
          if (obj !== undefined) {
            var obj$1 = Caml_option.valFromOption(obj);
            match$1 = [
              res$3[0],
              Require$Builder.validate(function (param) {
                    return Require$Builder.Validators.property(Require$Builder.Validators.cast(obj$1, Require$Builder.Validators.object, "This"), "typesafe-sql-pg", Require$Builder.Validators.nullable(Require$Builder.Validators.unknown));
                  })
            ];
          } else {
            match$1 = res$3;
          }
        } else {
          match$1 = res$3;
        }
      } else {
        match$1 = res$2;
      }
    } else {
      match$1 = res$1;
    }
  }
  var err$1 = match$1[1];
  var path$1 = match$1[0];
  var match$6;
  if (err$1.TAG === /* Ok */0) {
    var obj$2 = err$1._0;
    if (obj$2 !== undefined) {
      var obj$3 = Caml_option.valFromOption(obj$2);
      match$6 = [
        path$1,
        Require$Builder.validate(function (param) {
              var obj$4 = Require$Builder.Validators.cast(obj$3, Require$Builder.Validators.object, "This");
              var some = Require$Builder.Validators.property(obj$4, "sources", Require$Builder.Validators.nullable(Require$Builder.Validators.arrayOf(Require$Builder.Validators.objectOf2("input", Require$Builder.Validators.either(Require$Builder.Validators.string, (function (x) {
                                      return [x];
                                    }), Require$Builder.Validators.arrayOf(Require$Builder.Validators.string), (function (xs) {
                                      return xs;
                                    })), "output", Require$Builder.Validators.nullable(Require$Builder.Validators.either(Require$Builder.Validators.string, (function (str) {
                                          if (str === "") {
                                            return Require$Builder.Validators.failed(Loggable$Errors.fromText("Invalid \"output\" value. It cannot be an empty string."));
                                          }
                                          var fn = PathRebuild.make(str);
                                          if (fn.TAG === /* Ok */0) {
                                            return fn._0;
                                          } else {
                                            return Require$Builder.Validators.failed(Loggable$Errors.fromText("Invalid \"output\" value. " + fn._0));
                                          }
                                        }), Require$Builder.Validators.$$function, (function (fn) {
                                          return function (str) {
                                            return fn(str);
                                          };
                                        }))), (function (i, o) {
                                  return {
                                          input: i,
                                          output: o
                                        };
                                })))));
              return {
                      debug: Require$Builder.Validators.property(obj$4, "debug", Require$Builder.Validators.nullable(Require$Builder.Validators.bool)),
                      quiet: Require$Builder.Validators.property(obj$4, "quiet", Require$Builder.Validators.nullable(Require$Builder.Validators.bool)),
                      generator: Require$Builder.Validators.property(obj$4, "generator", Require$Builder.Validators.nullable(Require$Builder.Validators.string)),
                      host: Require$Builder.Validators.property(obj$4, "host", Require$Builder.Validators.nullable(Require$Builder.Validators.string)),
                      port: Require$Builder.Validators.property(obj$4, "port", Require$Builder.Validators.nullable(Require$Builder.Validators.string)),
                      username: Require$Builder.Validators.property(obj$4, "username", Require$Builder.Validators.nullable(Require$Builder.Validators.string)),
                      password: Require$Builder.Validators.property(obj$4, "password", Require$Builder.Validators.nullable(Require$Builder.Validators.string)),
                      dbname: Require$Builder.Validators.property(obj$4, "dbname", Require$Builder.Validators.nullable(Require$Builder.Validators.string)),
                      connection: Require$Builder.Validators.property(obj$4, "connection", Require$Builder.Validators.nullable(Require$Builder.Validators.string)),
                      sources: some !== undefined && some.length !== 0 ? some : undefined
                    };
            })
      ];
    } else {
      match$6 = [
        "%fallback",
        {
          TAG: /* Ok */0,
          _0: {
            debug: undefined,
            quiet: undefined,
            generator: undefined,
            host: undefined,
            port: undefined,
            username: undefined,
            password: undefined,
            dbname: undefined,
            connection: undefined,
            sources: undefined
          }
        }
      ];
    }
  } else {
    match$6 = [
      path$1,
      err$1
    ];
  }
  var data = match$6[1];
  var path$2 = match$6[0];
  var config;
  if (data.TAG === /* Ok */0) {
    if (!quiet.contents && command$1 !== "help") {
      console.error("Using config from:", path$2);
    }
    config = data._0;
  } else {
    config = exitWithLoggableError(Loggable$Errors.prepend(data._0, "Failed to load config file \"" + path$2 + "\"! Reason:\n\n"));
  }
  var ctx = {
    config: config,
    argv: argv
  };
  if (command$1 === "watch") {
    Commands$Builder.watch(ctx);
  } else if (command$1 === "pipe") {
    Commands$Builder.pipe(ctx);
  } else if (command$1 === "build") {
    Commands$Builder.build(ctx);
  } else {
    TTY$Builder.info(ctx, header);
    TTY$Builder.infoNl(ctx);
    TTY$Builder.info(ctx, help);
  }
}

/* x Not a pure module */
