// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("@rpominov/rescript-promise/lib/js/Promise.bs.js");
var Fs$PgCLI = require("./Fs.bs.js");
var TTY$PgCLI = require("./TTY.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Promises = require("fs/promises");
var Context$PgCLI = require("./Context.bs.js");
var Process$PgCLI = require("./Process.bs.js");

function mapAsyncSeq(arr, fn) {
  return Belt_Array.reduce(arr, $$Promise.resolve([]), (function (acc, item) {
                return $$Promise.chain(acc, (function (arr) {
                              return $$Promise.map(Curry._1(fn, item), (function (val) {
                                            return Belt_Array.concat(arr, [val]);
                                          }));
                            }));
              }));
}

function build(ctx) {
  var sources = Process$PgCLI.getOrExitWithError(Context$PgCLI.sources(ctx), "No sources specified");
  return $$Promise.done(mapAsyncSeq(sources, (function (source) {
                    return $$Promise.chain(Fs$PgCLI.resolveGlobs(source.input), (function (files) {
                                  return mapAsyncSeq(Process$PgCLI.getOkOrExitWithError(undefined, files), (function (path) {
                                                return $$Promise.chain(Process$PgCLI.catchAndExitWithError("Unable to read file \"" + path + "\". Reason:", Promises.readFile(path, "utf8")), (function (content) {
                                                              console.log(source, path, content);
                                                              return $$Promise.resolve("TODO");
                                                            }));
                                              }));
                                }));
                  })), (function (x) {
                console.log(x);
                
              }));
}

function watch(ctx) {
  return TTY$PgCLI.info(ctx, "TODO: watch");
}

function pipe(ctx) {
  return TTY$PgCLI.info(ctx, "TODO: pipe");
}

var $$Array;

exports.$$Array = $$Array;
exports.mapAsyncSeq = mapAsyncSeq;
exports.build = build;
exports.watch = watch;
exports.pipe = pipe;
/* Promise Not a pure module */
