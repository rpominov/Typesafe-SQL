// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util = require("util");
var Chalk = require("chalk");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var Context$TypesafeSqlPgCli = require("./Context.bs.js");
var Loggable$TypesafeSqlErrors = require("@typesafe-sql/rescript-errors/lib/js/src/Loggable.bs.js");

var supportsColor = Chalk.stderr.supportsColor === false ? undefined : Chalk.stderr.supportsColor;

function inspect(obj) {
  return Util.inspect(obj, {
              colors: supportsColor !== undefined
            });
}

function inspectDontWrapString(obj) {
  if (typeof obj === "string") {
    return obj;
  } else {
    return inspect(obj);
  }
}

function blue(obj) {
  return Chalk.stderr.blue(inspectDontWrapString(obj));
}

function red(obj) {
  return Chalk.stderr.redBright(inspectDontWrapString(obj));
}

function green(obj) {
  return Chalk.stderr.green(inspectDontWrapString(obj));
}

function dim(obj) {
  return Chalk.stderr.dim(inspectDontWrapString(obj));
}

var Chalk$1 = {
  supportsColor: supportsColor,
  inspect: inspect,
  inspectDontWrapString: inspectDontWrapString,
  blue: blue,
  red: red,
  green: green,
  dim: dim
};

function error(obj0) {
  console.error(Chalk.stderr.redBright(inspectDontWrapString(obj0)));
  
}

function error2(obj0, obj1) {
  console.error(Chalk.stderr.redBright(inspectDontWrapString(obj0)), Chalk.stderr.redBright(inspectDontWrapString(obj1)));
  
}

function error3(obj0, obj1, obj2) {
  console.error(Chalk.stderr.redBright(inspectDontWrapString(obj0)), Chalk.stderr.redBright(inspectDontWrapString(obj1)), Chalk.stderr.redBright(inspectDontWrapString(obj2)));
  
}

function errorMany(arr) {
  Caml_splice_call.spliceApply(console.error, [arr.map(red)]);
  
}

function printLoggable(err) {
  var obj0 = Loggable$TypesafeSqlErrors.toStrings((function (node) {
            if (node.TAG === /* Message */0) {
              return node._0;
            } else {
              return inspect(node._0);
            }
          }), undefined, err).join("");
  console.error(Chalk.stderr.redBright(inspectDontWrapString(obj0)));
  
}

function info(ctx, val0) {
  if (!Context$TypesafeSqlPgCli.quiet(ctx)) {
    console.error(val0);
    return ;
  }
  
}

function info2(ctx, val0, val1) {
  if (!Context$TypesafeSqlPgCli.quiet(ctx)) {
    console.error(val0, val1);
    return ;
  }
  
}

function info3(ctx, val0, val1, val2) {
  if (!Context$TypesafeSqlPgCli.quiet(ctx)) {
    console.error(val0, val1, val2);
    return ;
  }
  
}

function infoNl(ctx) {
  return info(ctx, "");
}

var Loggable;

exports.Loggable = Loggable;
exports.Chalk = Chalk$1;
exports.error = error;
exports.error2 = error2;
exports.error3 = error3;
exports.errorMany = errorMany;
exports.printLoggable = printLoggable;
exports.info = info;
exports.info2 = info2;
exports.info3 = info3;
exports.infoNl = infoNl;
/* supportsColor Not a pure module */
