// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Process = require("process");
var LogError = require("./LogError.bs.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function resolve(prim) {
  return Promise.resolve(prim);
}

function reject(prim) {
  return Promise.reject(prim);
}

function race(prim) {
  return Promise.race(prim);
}

function $$catch(promise, fn) {
  return promise.then((function (x) {
                return Promise.resolve({
                            TAG: /* Ok */0,
                            _0: x
                          });
              }), (function (e) {
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: Curry._1(fn, Js_exn.anyToExnInternal(e))
                          });
              }));
}

function chain(promise, fn) {
  return promise.then(Curry.__1(fn), undefined);
}

function crash(exn) {
  console.error("Unexpected error!\n", LogError.Loggable.fromExnVerbose(exn));
  return Process.exit(1);
}

function done(promise, fn) {
  promise.then((function (x) {
          try {
            Curry._1(fn, x);
            return Promise.resolve(undefined);
          }
          catch (raw_exn){
            return crash(Caml_js_exceptions.internalToOCamlException(raw_exn));
          }
        }), (function (e) {
          return crash(Js_exn.anyToExnInternal(e));
        }));
  
}

function chainOk(promise, fn) {
  return chain(promise, (function (val) {
                if (val.TAG === /* Ok */0) {
                  return Curry._1(fn, val._0);
                } else {
                  return Promise.resolve({
                              TAG: /* Error */1,
                              _0: val._0
                            });
                }
              }));
}

function mergeErrors(promise) {
  return chain(promise, (function (res) {
                var tmp;
                if (res.TAG === /* Ok */0) {
                  var e = res._0;
                  tmp = e.TAG === /* Ok */0 ? ({
                        TAG: /* Ok */0,
                        _0: e._0
                      }) : ({
                        TAG: /* Error */1,
                        _0: e._0
                      });
                } else {
                  tmp = {
                    TAG: /* Error */1,
                    _0: res._0
                  };
                }
                return Promise.resolve(tmp);
              }));
}

function sequence(arr) {
  var helper = function (result, i) {
    if (i === arr.length) {
      return result;
    } else {
      return chain(result, (function (r) {
                    return helper(chain(Curry._1(Caml_array.get(arr, i), undefined), (function (x) {
                                      return Promise.resolve(r.concat([x]));
                                    })), i + 1 | 0);
                  }));
    }
  };
  return helper(Promise.resolve([]), 0);
}

function make(prim) {
  return new Promise(Curry.__1(prim));
}

exports.resolve = resolve;
exports.reject = reject;
exports.race = race;
exports.make = make;
exports.$$catch = $$catch;
exports.chain = chain;
exports.done = done;
exports.chainOk = chainOk;
exports.mergeErrors = mergeErrors;
exports.sequence = sequence;
/* process Not a pure module */
