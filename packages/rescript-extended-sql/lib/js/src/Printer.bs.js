// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function setSafe(dict, key, val) {
  if (key !== "__proto__") {
    dict[key] = val;
  }
  return dict;
}

function print(nextParamIndexOpt, ast) {
  var nextParamIndex = nextParamIndexOpt !== undefined ? nextParamIndexOpt : ({
        contents: 1
      });
  var genParamIndex = function (param) {
    var index = nextParamIndex.contents;
    nextParamIndex.contents = index + 1 | 0;
    return index;
  };
  var _nodeIndex = 0;
  var _sqlAcc = [""];
  var _paramsAcc = {};
  while(true) {
    var paramsAcc = _paramsAcc;
    var sqlAcc = _sqlAcc;
    var nodeIndex = _nodeIndex;
    if (nodeIndex >= ast.length) {
      return [
              sqlAcc,
              paramsAcc
            ];
    }
    var match = ast[nodeIndex];
    var match$1 = match.node;
    var variant = match$1.NAME;
    if (variant === "BlockComment" || variant === "InlineComment") {
      _nodeIndex = nodeIndex + 1 | 0;
      continue ;
    }
    if (variant === "Parameter") {
      var paramIndex = genParamIndex(undefined);
      _paramsAcc = setSafe(paramsAcc, match$1.VAL.name, {
            NAME: "Parameter",
            VAL: {
              dataType: paramIndex
            }
          });
      _sqlAcc = sqlAcc.map((function(paramIndex){
          return function (x) {
            return x + "$" + paramIndex.toString();
          }
          }(paramIndex)));
      _nodeIndex = nodeIndex + 1 | 0;
      continue ;
    }
    if (variant === "SqlChunk") {
      var code = match$1.VAL;
      _sqlAcc = sqlAcc.map((function(code){
          return function (x) {
            return x + code;
          }
          }(code)));
      _nodeIndex = nodeIndex + 1 | 0;
      continue ;
    }
    if (variant === "RawParameter") {
      var match$2 = match$1.VAL;
      var options = match$2.options;
      if (options.length === 0) {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "Printer.res",
                35,
                12
              ],
              Error: new Error()
            };
      }
      _paramsAcc = setSafe(paramsAcc, match$2.name, {
            NAME: "RawParameter",
            VAL: {
              options: options
            }
          });
      _sqlAcc = sqlAcc.flatMap((function(options){
          return function (x) {
            return options.map(function (y) {
                        return x + y;
                      });
          }
          }(options)));
      _nodeIndex = nodeIndex + 1 | 0;
      continue ;
    }
    var match$3 = match$1.VAL;
    var body = match$3.body;
    var separator = match$3.separator;
    var match$4 = print(nextParamIndex, body);
    var subSql = match$4[0];
    var match$5 = print(nextParamIndex, body);
    var subSql2 = match$5[0];
    _paramsAcc = setSafe(paramsAcc, match$3.name, {
          NAME: "BatchParameter",
          VAL: {
            separator: separator,
            fields: match$4[1]
          }
        });
    _sqlAcc = sqlAcc.flatMap((function(subSql){
          return function (x) {
            return subSql.map(function (y) {
                        return x + y;
                      });
          }
          }(subSql))).flatMap((function(separator,subSql2){
        return function (x) {
          return subSql2.map(function (y) {
                      return x + separator + y;
                    });
        }
        }(separator,subSql2)));
    _nodeIndex = nodeIndex + 1 | 0;
    continue ;
  };
}

exports.setSafe = setSafe;
exports.print = print;
/* No side effect */
