// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pg = require("pg");
var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var Password = {};

var TypesParser = {};

var Config = {};

var QueryObject = {};

var QueryResult = {};

function query(client, parameters, queryString) {
  return client.query(queryString, parameters);
}

function toResult(err, res) {
  if (err == null) {
    if (res == null) {
      return Js_exn.raiseError("client.query(.., cb) has called the cb with neither error nor result");
    } else {
      return {
              TAG: /* Ok */0,
              _0: res
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: err
          };
  }
}

function queryCb(client, parameters, queryString, cb) {
  client.query({
        values: parameters,
        text: queryString
      }, (function (err, res) {
          return Curry._1(cb, toResult(err, res));
        }));
  
}

function queryObjCb(client, obj, cb) {
  client.query(obj, (function (err, res) {
          return Curry._1(cb, toResult(err, res));
        }));
  
}

var Client = {
  query: query,
  queryCb: queryCb,
  queryObjCb: queryObjCb
};

var $$instanceof = ((x, C) => x instanceof C);

function fromJsExn(exn) {
  if ($$instanceof(exn, Pg.DatabaseError)) {
    return Caml_option.some(exn);
  }
  
}

function fromExn(exn) {
  if (exn.RE_EXN_ID === Js_exn.$$Error) {
    return fromJsExn(exn._1);
  }
  
}

function DatabaseError_toJsExn(prim) {
  return prim;
}

var DatabaseError = {
  fromJsExn: fromJsExn,
  fromExn: fromExn,
  toJsExn: DatabaseError_toJsExn
};

exports.Password = Password;
exports.TypesParser = TypesParser;
exports.Config = Config;
exports.QueryObject = QueryObject;
exports.QueryResult = QueryResult;
exports.Client = Client;
exports.DatabaseError = DatabaseError;
/* pg Not a pure module */
