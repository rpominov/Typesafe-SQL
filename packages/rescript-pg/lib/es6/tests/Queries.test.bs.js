// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pg from "../Pg.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";

function $$then(promise, fn) {
  return promise.then(Curry.__1(fn));
}

var client = Pg.Client.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

beforeAll(function () {
      return client.connect();
    });

afterAll(function () {
      return client.end();
    });

test("Client.query", (function () {
        expect.assertions(1);
        var promise = Pg.Client.query(client, undefined, "SELECT 42 num");
        return promise.then(function (result) {
                    expect(result.rows).toEqual([{
                            num: 42
                          }]);
                    return Promise.resolve(undefined);
                  });
      }));

test("Client.query + params", (function () {
        expect.assertions(1);
        var promise = Pg.Client.query(client, [
              42,
              "text"
            ], "SELECT $1::int num, $2::text str");
        return promise.then(function (result) {
                    expect(result.rows).toEqual([{
                            num: 42,
                            str: "text"
                          }]);
                    return Promise.resolve(undefined);
                  });
      }));

test("Client.queryCb", (function (done) {
        expect.assertions(1);
        return Pg.Client.queryCb(client, undefined, "SELECT 42 num", (function (result) {
                      expect(Belt_Result.getExn(result).rows).toEqual([{
                              num: 42
                            }]);
                      return done();
                    }));
      }));

test("Client.queryCb + params", (function (done) {
        expect.assertions(1);
        return Pg.Client.queryCb(client, [
                    42,
                    "text"
                  ], "SELECT $1::int num, $2::text str", (function (result) {
                      expect(Belt_Result.getExn(result).rows).toEqual([{
                              num: 42,
                              str: "text"
                            }]);
                      return done();
                    }));
      }));

test("Client.queryObj", (function () {
        expect.assertions(1);
        var promise = client.query({
              text: "SELECT 42 num"
            });
        return promise.then(function (result) {
                    expect(result.rows).toEqual([{
                            num: 42
                          }]);
                    return Promise.resolve(undefined);
                  });
      }));

test("Client.queryObj + rowMode:array", (function () {
        expect.assertions(1);
        var promise = client.query({
              rowMode: "array",
              text: "SELECT 42 num"
            });
        return promise.then(function (result) {
                    expect(result.rows).toEqual([[42]]);
                    return Promise.resolve(undefined);
                  });
      }));

test("Client.queryObj + params", (function () {
        expect.assertions(1);
        var promise = client.query({
              values: [
                42,
                "text"
              ],
              text: "SELECT $1::int num, $2::text str"
            });
        return promise.then(function (result) {
                    expect(result.rows).toEqual([{
                            num: 42,
                            str: "text"
                          }]);
                    return Promise.resolve(undefined);
                  });
      }));

test("Client.queryObjCb", (function (done) {
        expect.assertions(1);
        return Pg.Client.queryObjCb(client, {
                    text: "SELECT 42 num"
                  }, (function (result) {
                      expect(Belt_Result.getExn(result).rows).toEqual([{
                              num: 42
                            }]);
                      return done();
                    }));
      }));

export {
  $$then ,
  client ,
  
}
/* client Not a pure module */
