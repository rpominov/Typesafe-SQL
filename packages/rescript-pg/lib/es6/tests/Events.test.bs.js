// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pg from "../Pg.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";

function $$then(promise, fn) {
  return promise.then(Curry.__1(fn));
}

var client = Pg.Client.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

beforeAll(function () {
      return client.connect();
    });

afterAll(function () {
      return client.end();
    });

test("Error", (function (done) {
        expect.assertions(1);
        var app = "events.Error.test";
        var client2 = Pg.Client.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, app, undefined, undefined, undefined, undefined, undefined);
        var errors = [];
        client2.on("error", (function (err) {
                var dbErr = Pg.DatabaseError.fromJsExn(err);
                errors.push(dbErr !== undefined ? dbErr.code : err.message);
                if (errors.length === 2) {
                  expect(errors).toEqual([
                        "57P01",
                        "Connection terminated unexpectedly"
                      ]);
                  return done();
                }
                
              }));
        var promise = client2.connect();
        promise.then(function (param) {
              return Pg.query(client, [app], "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE application_name = $1");
            });
        
      }));

test("Notice", (function () {
        expect.assertions(1);
        var notices = [];
        var callback = function (notice) {
          notices.push(notice);
          
        };
        client.on("notice", callback);
        var promise = Pg.query(client, undefined, "DO language plpgsql $$ BEGIN RAISE NOTICE 'test 123'; END $$");
        return promise.then(function (param) {
                    expect(notices.map(function (n) {
                                return n.message;
                              })).toEqual(["test 123"]);
                    client.removeListener("notice", callback);
                    return Promise.resolve(undefined);
                  });
      }));

test("Notification", (function () {
        expect.assertions(1);
        var notifications = [];
        var callback = function (n) {
          notifications.push(n);
          
        };
        client.on("notification", callback);
        var promise = Pg.query(client, undefined, "LISTEN foo");
        var promise$1 = promise.then(function (param) {
              return Pg.query(client, undefined, "NOTIFY foo, 'bar'");
            });
        var promise$2 = promise$1.then(function (param) {
              return Pg.query(client, undefined, "NOTIFY foo");
            });
        return promise$2.then(function (param) {
                    expect(notifications.map(function (n) {
                                return [
                                        n.channel,
                                        n.payload
                                      ];
                              })).toEqual([
                          [
                            "foo",
                            "bar"
                          ],
                          [
                            "foo",
                            ""
                          ]
                        ]);
                    client.removeListener("notification", callback);
                    return Promise.resolve(undefined);
                  });
      }));

export {
  $$then ,
  client ,
  
}
/* client Not a pure module */
