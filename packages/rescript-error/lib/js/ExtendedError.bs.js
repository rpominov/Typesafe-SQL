// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_dict = require("rescript/lib/js/js_dict.js");

var isInstanceOf = ((x, C) => x instanceof C);

function classifyErr(err) {
  if (isInstanceOf(err, Error)) {
    return {
            NAME: "ValidJsError",
            VAL: err
          };
  } else {
    return {
            NAME: "InvalidJsError",
            VAL: err
          };
  }
}

function classifyExn(exn) {
  if (exn.RE_EXN_ID === Js_exn.$$Error) {
    return classifyErr(exn._1);
  } else {
    return {
            NAME: "ReScriptExn",
            VAL: exn
          };
  }
}

function message(param) {
  return param.VAL.message;
}

function name(param) {
  return param.VAL.name;
}

function stack(param) {
  return param.VAL.stack;
}

function code(param) {
  var opt = param.VAL.code;
  if (opt !== undefined && typeof opt === "string") {
    return opt;
  }
  
}

function stringifyAnySafe(val) {
  var str;
  try {
    str = JSON.stringify(val);
  }
  catch (exn){
    return String(val);
  }
  if (str !== undefined) {
    return str;
  } else {
    return String(val);
  }
}

function stringifyExnContent(exn) {
  var entries = Js_dict.entries(exn).filter(function (param) {
        var key = param[0];
        if (key !== "RE_EXN_ID") {
          return key !== "Error";
        } else {
          return false;
        }
      });
  if (entries.length === 0) {
    return "";
  } else {
    return "(" + entries.map(function (param) {
                  return param[0] + ": " + stringifyAnySafe(param[1]);
                }).join(" ") + ")";
  }
}

function toJsError(exn) {
  var err = classifyExn(exn);
  var variant = err.NAME;
  if (variant !== "ReScriptExn") {
    if (variant === "InvalidJsError") {
      return {
              NAME: "ValidJsError",
              VAL: new Error(String(err.VAL))
            };
    } else {
      return err;
    }
  }
  var exn$1 = err.VAL;
  var match = classifyErr(exn$1.Error);
  var err$1 = match.NAME === "InvalidJsError" ? new Error("") : match.VAL;
  err$1.message = exn$1.RE_EXN_ID + stringifyExnContent(exn$1);
  err$1.name = "ReScript_Error";
  err$1.reScriptExn = exn$1;
  return {
          NAME: "ValidJsError",
          VAL: err$1
        };
}

exports.isInstanceOf = isInstanceOf;
exports.classifyErr = classifyErr;
exports.classifyExn = classifyExn;
exports.message = message;
exports.name = name;
exports.stack = stack;
exports.code = code;
exports.stringifyAnySafe = stringifyAnySafe;
exports.stringifyExnContent = stringifyExnContent;
exports.toJsError = toJsError;
/* No side effect */
