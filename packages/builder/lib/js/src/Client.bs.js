// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Process = require("process");
var Caml_option = require("rescript/lib/js/caml_option.js");
var PathRebuild = require("rescript-path-rebuild/lib/js/PathRebuild.bs.js");
var Fs$TypesafeSqlBuilder = require("./Fs.bs.js");
var TTY$TypesafeSqlBuilder = require("./TTY.bs.js");
var Steps$TypesafeSqlBuilder = require("./Steps.bs.js");
var Promise$TypesafeSqlBuilder = require("./Promise.bs.js");
var LogError$TypesafeSqlBuilder = require("./LogError.bs.js");
var DescribeQuery = require("@typesafe-sql/describe-query");

function make(dbConfig, rootDir, sources, output, generator) {
  var partial_arg = "Could not connect to the database server\n\n";
  return Promise$TypesafeSqlBuilder.chainOk(Promise$TypesafeSqlBuilder.$$catch(DescribeQuery.createClient(dbConfig !== undefined ? Caml_option.valFromOption(dbConfig) : ({})), (function (param) {
                    return LogError$TypesafeSqlBuilder.wrapExn(partial_arg, param);
                  })), (function (describeQueryClient) {
                var fn = PathRebuild.make(output);
                var tmp;
                if (fn.TAG === /* Ok */0) {
                  var fn$1 = fn._0;
                  tmp = {
                    TAG: /* Ok */0,
                    _0: {
                      describeQueryClient: describeQueryClient,
                      rootDir: Fs$TypesafeSqlBuilder.resoloveRoot(rootDir),
                      sources: sources,
                      output: (function (x) {
                          return Curry._2(fn$1, undefined, x);
                        }),
                      generator: generator,
                      processingFiles: false,
                      terminated: false
                    }
                  };
                } else {
                  tmp = {
                    TAG: /* Error */1,
                    _0: LogError$TypesafeSqlBuilder.wrapString(fn._0)
                  };
                }
                return Promise$TypesafeSqlBuilder.resolve(tmp);
              }));
}

function terminate(client) {
  if (client.terminated) {
    console.warn("terminate() was applied to a client that is already terminated");
  } else {
    client.terminated = true;
    client.describeQueryClient.terminate();
  }
  
}

function processFile(client, file) {
  Process.stdout.write("[" + file + "]");
  var message = Curry._1(client.output, file);
  if (message.TAG === /* Ok */0) {
    var output = message._0;
    return Promise$TypesafeSqlBuilder.chain(TTY$TypesafeSqlBuilder.progress(Promise$TypesafeSqlBuilder.chainOk(TTY$TypesafeSqlBuilder.progress(Promise$TypesafeSqlBuilder.chainOk(TTY$TypesafeSqlBuilder.progress(Promise$TypesafeSqlBuilder.chainOk(TTY$TypesafeSqlBuilder.progress(Fs$TypesafeSqlBuilder.read(Fs$TypesafeSqlBuilder.joinPath(client.rootDir, file))), Steps$TypesafeSqlBuilder.Parse.asyncParse)), (function (parsed) {
                                  return Promise$TypesafeSqlBuilder.chainOk(TTY$TypesafeSqlBuilder.progress(Steps$TypesafeSqlBuilder.Describe.describeMany(client.describeQueryClient, parsed.map(function (x) {
                                                          return x.processedStatement;
                                                        }))), (function (__x) {
                                                return Steps$TypesafeSqlBuilder.Generate.generate(parsed, __x, Steps$TypesafeSqlBuilder.Generate.exampleGenerator);
                                              }));
                                }))), (function (__x) {
                          return Fs$TypesafeSqlBuilder.write(Fs$TypesafeSqlBuilder.joinPath(client.rootDir, output), __x);
                        }))), (function (result) {
                  if (result.TAG === /* Ok */0) {
                    Process.stdout.write("ok\n");
                  } else {
                    Process.stdout.write("error\n");
                    LogError$TypesafeSqlBuilder.log(result._0);
                    console.error("");
                  }
                  return Promise$TypesafeSqlBuilder.resolve(undefined);
                }));
  }
  console.error(message._0);
  return Promise$TypesafeSqlBuilder.resolve(undefined);
}

function build(client) {
  return Promise$TypesafeSqlBuilder.chain(Fs$TypesafeSqlBuilder.resolve(client.rootDir, client.sources), (function (result) {
                if (result.TAG === /* Ok */0) {
                  return Promise$TypesafeSqlBuilder.chain(Promise$TypesafeSqlBuilder.sequence(result._0.map(function (file) {
                                      return function (param) {
                                        return processFile(client, file);
                                      };
                                    })), (function (param) {
                                return Promise$TypesafeSqlBuilder.resolve(undefined);
                              }));
                }
                LogError$TypesafeSqlBuilder.log(result._0);
                return Promise$TypesafeSqlBuilder.resolve(undefined);
              }));
}

exports.make = make;
exports.terminate = terminate;
exports.processFile = processFile;
exports.build = build;
/* process Not a pure module */
