// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function $$int(str) {
  var result = Number(str);
  var result$p = result | 0;
  if (result === result$p) {
    return result$p;
  }
  
}

function parsePatternElment(str) {
  var _status_ = {
    TAG: /* L */0,
    _0: ""
  };
  var _i = 0;
  var _results = [];
  while(true) {
    var results = _results;
    var i = _i;
    var status_ = _status_;
    if (status_ === undefined) {
      return {
              TAG: /* Ok */0,
              _0: results
            };
    }
    var ch = str.charAt(i);
    var status$p;
    var exit = 0;
    switch (status_.TAG | 0) {
      case /* L */0 :
          switch (ch) {
            case "" :
                status$p = {
                  TAG: /* Ok */0,
                  _0: undefined
                };
                break;
            case "\\" :
                status$p = {
                  TAG: /* Ok */0,
                  _0: {
                    TAG: /* S */1,
                    _0: status_._0
                  }
                };
                break;
            case "{" :
                status$p = {
                  TAG: /* Ok */0,
                  _0: {
                    TAG: /* I */2,
                    _0: ""
                  }
                };
                break;
            default:
              exit = 1;
          }
          break;
      case /* S */1 :
          if (ch === "") {
            status$p = {
              TAG: /* Error */1,
              _0: "Unexpected end of string. Expected a character after \"\\\""
            };
          } else {
            exit = 1;
          }
          break;
      case /* I */2 :
          switch (ch) {
            case "." :
                status$p = {
                  TAG: /* Ok */0,
                  _0: {
                    TAG: /* R */3,
                    _0: status_._0,
                    _1: ""
                  }
                };
                break;
            case "}" :
                status$p = {
                  TAG: /* Ok */0,
                  _0: {
                    TAG: /* L */0,
                    _0: ""
                  }
                };
                break;
            default:
              exit = 1;
          }
          break;
      case /* R */3 :
          var exit$1 = 0;
          if (status_._1 === "" && ch === ".") {
            status$p = {
              TAG: /* Ok */0,
              _0: {
                TAG: /* R */3,
                _0: status_._0,
                _1: ""
              }
            };
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            switch (ch) {
              case "." :
                  status$p = {
                    TAG: /* Error */1,
                    _0: "Unexpected \".\" inside a range"
                  };
                  break;
              case "}" :
                  status$p = {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* L */0,
                      _0: ""
                    }
                  };
                  break;
              default:
                exit = 1;
            }
          }
          break;
      
    }
    if (exit === 1) {
      if (ch === "") {
        status$p = {
          TAG: /* Error */1,
          _0: "Unexpected end of string. Did you forget to close a range?"
        };
      } else {
        var exit$2 = 0;
        switch (status_.TAG | 0) {
          case /* L */0 :
          case /* S */1 :
              exit$2 = 2;
              break;
          case /* I */2 :
              status$p = {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* I */2,
                  _0: status_._0 + ch
                }
              };
              break;
          case /* R */3 :
              status$p = {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* R */3,
                  _0: status_._0,
                  _1: status_._1 + ch
                }
              };
              break;
          
        }
        if (exit$2 === 2) {
          status$p = {
            TAG: /* Ok */0,
            _0: {
              TAG: /* L */0,
              _0: status_._0 + ch
            }
          };
        }
        
      }
    }
    if (status$p.TAG !== /* Ok */0) {
      return {
              TAG: /* Error */1,
              _0: status$p._0
            };
    }
    var status$p$p = status$p._0;
    var newResult;
    switch (status_.TAG | 0) {
      case /* L */0 :
          var s = status_._0;
          var exit$3 = 0;
          if (status$p$p !== undefined) {
            switch (status$p$p.TAG | 0) {
              case /* L */0 :
              case /* S */1 :
                  newResult = {
                    TAG: /* Ok */0,
                    _0: undefined
                  };
                  break;
              case /* I */2 :
              case /* R */3 :
                  exit$3 = 1;
                  break;
              
            }
          } else {
            exit$3 = 1;
          }
          if (exit$3 === 1) {
            newResult = s === "" ? ({
                  TAG: /* Ok */0,
                  _0: undefined
                }) : ({
                  TAG: /* Ok */0,
                  _0: {
                    TAG: /* Literal */2,
                    _0: s
                  }
                });
          }
          break;
      case /* S */1 :
          newResult = {
            TAG: /* Ok */0,
            _0: undefined
          };
          break;
      case /* I */2 :
          var a = status_._0;
          var exit$4 = 0;
          if (status$p$p !== undefined) {
            switch (status$p$p.TAG | 0) {
              case /* L */0 :
              case /* S */1 :
                  exit$4 = 1;
                  break;
              case /* I */2 :
              case /* R */3 :
                  newResult = {
                    TAG: /* Ok */0,
                    _0: undefined
                  };
                  break;
              
            }
          } else {
            exit$4 = 1;
          }
          if (exit$4 === 1) {
            var a$p = $$int(a);
            newResult = a$p !== undefined ? ({
                  TAG: /* Ok */0,
                  _0: {
                    TAG: /* Index */1,
                    _0: a$p
                  }
                }) : ({
                  TAG: /* Error */1,
                  _0: "Bad range limit: " + a
                });
          }
          break;
      case /* R */3 :
          var b = status_._1;
          var a$1 = status_._0;
          var exit$5 = 0;
          if (status$p$p !== undefined && status$p$p.TAG === /* R */3) {
            newResult = {
              TAG: /* Ok */0,
              _0: undefined
            };
          } else {
            exit$5 = 1;
          }
          if (exit$5 === 1) {
            var a$p$1 = $$int(a$1);
            if (a$p$1 !== undefined) {
              var b$p = $$int(b);
              newResult = b$p !== undefined ? (
                  (
                    a$p$1 >= 0 ? b$p > 0 && b$p < a$p$1 : b$p >= 0 || b$p < a$p$1
                  ) ? ({
                        TAG: /* Error */1,
                        _0: "Bad range limits: " + a$1 + ".." + b
                      }) : ({
                        TAG: /* Ok */0,
                        _0: {
                          TAG: /* Range */0,
                          _0: a$p$1,
                          _1: b$p
                        }
                      })
                ) : ({
                    TAG: /* Error */1,
                    _0: "Bad range limit: " + b
                  });
            } else {
              newResult = {
                TAG: /* Error */1,
                _0: "Bad range limit: " + a$1
              };
            }
          }
          break;
      
    }
    if (newResult.TAG !== /* Ok */0) {
      return {
              TAG: /* Error */1,
              _0: newResult._0
            };
    }
    var newResult$p = newResult._0;
    var results$p = newResult$p !== undefined ? results.concat([newResult$p]) : results;
    _results = results$p;
    _i = i + 1 | 0;
    _status_ = status$p$p;
    continue ;
  };
}

function parseDistinationPattern(pattern) {
  return pattern.split("/").map(parsePatternElment);
}

exports.$$int = $$int;
exports.parsePatternElment = parsePatternElment;
exports.parseDistinationPattern = parseDistinationPattern;
/* No side effect */
