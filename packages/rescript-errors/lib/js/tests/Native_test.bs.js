// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Native$Errors = require("../Native.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var Custom = /* @__PURE__ */Caml_exceptions.create("Native_test-Errors.Custom");

test("Invalid error", (function () {
        var fn = (() => { throw 123 });
        try {
          return Curry._1(fn, undefined);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          expect(Native$Errors.fromExn(exn)).toEqual(undefined);
          return ;
        }
      }));

test("Valid error", (function () {
        var fn = (() => { throw new Error("test") });
        try {
          return Curry._1(fn, undefined);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          expect(Native$Errors.fromExn(exn)).toEqual(Caml_option.some(new Error("test")));
          return ;
        }
      }));

test("fromJsExn", (function () {
        expect(Native$Errors.fromJsExn(new Error("test"))).toEqual(Caml_option.some(new Error("test")));
        
      }));

test("name", (function () {
        expect(new Error("").name).toBe("Error");
        
      }));

test("message", (function () {
        expect(new Error("test").message).toBe("test");
        
      }));

test("code", (function () {
        expect(Native$Errors.code(new Error(""))).toBe(undefined);
        var fn = (() => { require('node:net').connect(-1) });
        try {
          return Curry._1(fn, undefined);
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          if (err.RE_EXN_ID === Js_exn.$$Error) {
            expect(Native$Errors.code(err._1)).toBe("ERR_SOCKET_BAD_PORT");
            return ;
          }
          throw err;
        }
      }));

test("toExn + fromExn", (function () {
        var err = new Error("test");
        expect(Belt_Option.getExn(Native$Errors.fromExn(Native$Errors.toExn(err)))).toBe(err);
        
      }));

test("rethrowAsNative", (function () {
        var fn = (() => { throw new Error("test") });
        var nativeCatch = ((fn) => { try { fn(); return new Error("Did not throw") } catch(e) { return e } });
        expect(nativeCatch(function (param) {
                    try {
                      return Curry._1(fn, undefined);
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn.RE_EXN_ID === "Not_found") {
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "Native_test.res",
                                75,
                                19
                              ],
                              Error: new Error()
                            };
                      }
                      throw exn;
                    }
                  })).not.toEqual(Caml_option.some(new Error("test")));
        expect(nativeCatch(function (param) {
                    try {
                      return Curry._1(fn, undefined);
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn.RE_EXN_ID === "Not_found") {
                        throw {
                              RE_EXN_ID: "Assert_failure",
                              _1: [
                                "Native_test.res",
                                87,
                                19
                              ],
                              Error: new Error()
                            };
                      }
                      return Native$Errors.rethrowAsNative(exn);
                    }
                  })).toEqual(Caml_option.some(new Error("test")));
        
      }));

exports.Custom = Custom;
/*  Not a pure module */
