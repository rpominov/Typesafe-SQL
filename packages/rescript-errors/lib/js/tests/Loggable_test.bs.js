// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Loggable$Errors = require("../Loggable.bs.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

test("fromText", (function () {
        var loggable = Loggable$Errors.fromText("test");
        expect(Loggable$Errors.cause(loggable)).toEqual(/* None */0);
        expect(Loggable$Errors.compile(loggable)).toMatchSnapshot();
        expect(Loggable$Errors.toString(loggable)).toEqual("test");
        
      }));

test("fromExn Invalid_argument", (function () {
        var match;
        try {
          throw {
                RE_EXN_ID: "Invalid_argument",
                _1: "test",
                Error: new Error()
              };
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          match = [
            Loggable$Errors.fromExn(exn),
            exn
          ];
        }
        var loggable = match[0];
        expect(Loggable$Errors.cause(loggable)).toEqual({
              TAG: /* Exn */0,
              _0: match[1]
            });
        expect(Loggable$Errors.compile(loggable)).toMatchSnapshot();
        expect(Loggable$Errors.toString(loggable)).toEqual("{\"RE_EXN_ID\":\"Invalid_argument\",\"_1\":\"test\",\"Error\":{}}");
        
      }));

test("fromExn Js.Exn.raiseError", (function () {
        var loggable;
        try {
          loggable = Js_exn.raiseError("test");
        }
        catch (raw_exn){
          loggable = Loggable$Errors.fromExn(Caml_js_exceptions.internalToOCamlException(raw_exn));
        }
        expect(Loggable$Errors.cause(loggable)).toEqual({
              TAG: /* Native */1,
              _0: new Error("test")
            });
        expect(Loggable$Errors.compile(loggable)).toMatchSnapshot();
        expect(Loggable$Errors.toString(loggable)).toEqual("test");
        
      }));

test("fromExnVerbose Js.Exn.raiseError", (function () {
        var loggable;
        try {
          loggable = Js_exn.raiseError("test");
        }
        catch (raw_exn){
          loggable = Loggable$Errors.fromExnVerbose(Caml_js_exceptions.internalToOCamlException(raw_exn));
        }
        expect(Loggable$Errors.cause(loggable)).toEqual({
              TAG: /* Native */1,
              _0: new Error("test")
            });
        expect(Loggable$Errors.compile(loggable)).toMatchSnapshot();
        expect(Caml_array.get(Loggable$Errors.toString(loggable).split("\n"), 0)).toEqual("Error: test");
        
      }));

test("fromExn Js.Exn.raiseError + annotate", (function () {
        var loggable;
        try {
          loggable = Js_exn.raiseError("test");
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          loggable = Loggable$Errors.annotate(Loggable$Errors.fromExn(exn), "annotaion");
        }
        expect(Loggable$Errors.cause(loggable)).toEqual({
              TAG: /* Native */1,
              _0: new Error("test")
            });
        expect(Loggable$Errors.compile(loggable)).toMatchSnapshot();
        expect(Loggable$Errors.toString(loggable)).toEqual("annotaion test");
        
      }));

/*  Not a pure module */
