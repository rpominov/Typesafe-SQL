// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_dict = require("rescript/lib/js/js_dict.js");

function moduleName(name) {
  return name.charAt(0).toUpperCase() + name.slice(1);
}

function identifier(x) {
  return "\\\"" + x + "\"";
}

function fixBuildInType(x) {
  switch (x) {
    case "bool" :
    case "char" :
        return x + "_";
    default:
      return x;
  }
}

function pgToReasonType(datatype) {
  return [
            "PgTypes",
            moduleName(datatype.namespace.nspname),
            identifier(fixBuildInType(datatype.typname))
          ].join(".");
}

function indent(str) {
  return "  " + str.split("\n").join("\n  ");
}

function tupleOf(items) {
  if (items.length === 0) {
    return "()";
  } else {
    return "(\n" + indent(items.join(",\n")) + "\n)";
  }
}

function recordOf(items) {
  if (items.length === 0) {
    return "()";
  } else {
    return [
              "{",
              indent(items.map(function (param) {
                          return identifier(param[0]) + ": " + param[1];
                        }).join(",\n")),
              "}"
            ].join("\n");
  }
}

function codeComment(str) {
  return "// " + str.split("\n").join("\n// ");
}

function moduleDefinition(name, body) {
  return [
            "module " + moduleName(name) + " = {",
            indent(body),
            "}"
          ].join("\n");
}

function stringVar(name, content) {
  return "let " + name + " = " + JSON.stringify(content);
}

function typeDefinition(name, value) {
  return "type " + name + " = " + value;
}

function uniqueBy(arr, fn) {
  return Js_dict.values(Js_dict.fromArray(arr.map(function (x) {
                      return [
                              Curry._1(fn, x),
                              x
                            ];
                    })));
}

function generateItem(data) {
  var arr = data.columns;
  var match = data.columns;
  var arr$1 = data.columns;
  return [
            codeComment(data.originalStatement),
            moduleDefinition(data.name, [
                    stringVar("statement", data.processedStatement),
                    typeDefinition("parameters", tupleOf(data.parameters.map(function (p) {
                                  return pgToReasonType(p.datatype);
                                }))),
                    typeDefinition("parametersRecord", recordOf(uniqueBy(data.parameters, (function (p) {
                                      return p.name;
                                    })).map(function (p) {
                                  return [
                                          p.name,
                                          pgToReasonType(p.datatype)
                                        ];
                                }))),
                    "let convertParameters = (r: parametersRecord): parameters => (" + data.parameters.map(function (p) {
                            return "r." + identifier(p.name);
                          }).join(", ") + ")",
                    typeDefinition("row", arr !== undefined ? tupleOf(arr.map(function (p) {
                                    return pgToReasonType(p.type);
                                  })) : "unit"),
                    typeDefinition("rows", match !== undefined ? "array<row>" : "unit"),
                    typeDefinition("rowRecord", arr$1 !== undefined ? recordOf(uniqueBy(arr$1, (function (p) {
                                        return p.name;
                                      })).map(function (p) {
                                    return [
                                            p.name,
                                            pgToReasonType(p.type)
                                          ];
                                  })) : "unit")
                  ].join("\n\n"))
          ].join("\n");
}

function generator(data) {
  return Promise.resolve(data.map(generateItem).join("\n\n"));
}

var S;

var A;

exports.S = S;
exports.A = A;
exports.moduleName = moduleName;
exports.identifier = identifier;
exports.fixBuildInType = fixBuildInType;
exports.pgToReasonType = pgToReasonType;
exports.indent = indent;
exports.tupleOf = tupleOf;
exports.recordOf = recordOf;
exports.codeComment = codeComment;
exports.moduleDefinition = moduleDefinition;
exports.stringVar = stringVar;
exports.typeDefinition = typeDefinition;
exports.uniqueBy = uniqueBy;
exports.generateItem = generateItem;
exports.generator = generator;
/* No side effect */
