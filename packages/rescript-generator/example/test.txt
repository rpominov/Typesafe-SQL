// -- @allAnimals
// SELECT * FROM animals WHERE name = $name AND $num = 0 OR $num > 5
module AllAnimals = {
  let statement = "-- @allAnimals\nSELECT * FROM animals WHERE name = $1 AND $2 = 0 OR $3 > 5"
  
  type parameters = (
    PgTypes.Pg_catalog.\"text",
    PgTypes.Pg_catalog.\"int4",
    PgTypes.Pg_catalog.\"int4"
  )
  
  type parametersRecord = {
    name: PgTypes.Pg_catalog.\"text",
    num: PgTypes.Pg_catalog.\"int4"
  }
  
  let convertParameters = (r: parametersRecord): parameters => (r.name, r.num, r.num)
  
  type column = (
    PgTypes.Pg_catalog.\"int4",
    PgTypes.Pg_catalog.\"text",
    PgTypes.Pg_catalog.\"bool_"
  )
  
  type columns = array<column>
}

// -- @allTypes
// SELECT * FROM all_types
module AllTypes = {
  let statement = "-- @allTypes\nSELECT * FROM all_types"
  
  type parameters = ()
  
  type parametersRecord = ()
  
  let convertParameters = (r: parametersRecord): parameters => ()
  
  type column = (
    PgTypes.Pg_catalog.\"int8",
    PgTypes.Pg_catalog.\"int8",
    PgTypes.Pg_catalog.\"bit",
    PgTypes.Pg_catalog.\"varbit",
    PgTypes.Pg_catalog.\"bool_",
    PgTypes.Pg_catalog.\"box",
    PgTypes.Pg_catalog.\"bytea",
    PgTypes.Pg_catalog.\"bpchar",
    PgTypes.Pg_catalog.\"varchar",
    PgTypes.Pg_catalog.\"cidr",
    PgTypes.Pg_catalog.\"circle",
    PgTypes.Pg_catalog.\"date",
    PgTypes.Pg_catalog.\"float8",
    PgTypes.Pg_catalog.\"inet",
    PgTypes.Pg_catalog.\"int4",
    PgTypes.Pg_catalog.\"interval",
    PgTypes.Pg_catalog.\"json",
    PgTypes.Pg_catalog.\"jsonb",
    PgTypes.Pg_catalog.\"line",
    PgTypes.Pg_catalog.\"lseg",
    PgTypes.Pg_catalog.\"macaddr",
    PgTypes.Pg_catalog.\"macaddr8",
    PgTypes.Pg_catalog.\"money",
    PgTypes.Pg_catalog.\"numeric",
    PgTypes.Pg_catalog.\"path",
    PgTypes.Pg_catalog.\"pg_lsn",
    PgTypes.Pg_catalog.\"pg_snapshot",
    PgTypes.Pg_catalog.\"point",
    PgTypes.Pg_catalog.\"polygon",
    PgTypes.Pg_catalog.\"float4",
    PgTypes.Pg_catalog.\"int2",
    PgTypes.Pg_catalog.\"int2",
    PgTypes.Pg_catalog.\"int4",
    PgTypes.Pg_catalog.\"text",
    PgTypes.Pg_catalog.\"time",
    PgTypes.Pg_catalog.\"timetz",
    PgTypes.Pg_catalog.\"timestamp",
    PgTypes.Pg_catalog.\"timestamptz",
    PgTypes.Pg_catalog.\"tsquery",
    PgTypes.Pg_catalog.\"tsvector",
    PgTypes.Pg_catalog.\"txid_snapshot",
    PgTypes.Pg_catalog.\"uuid",
    PgTypes.Pg_catalog.\"xml"
  )
  
  type columns = array<column>
}

// -- @aliases
// SELECT * FROM aliases
module Aliases = {
  let statement = "-- @aliases\nSELECT * FROM aliases"
  
  type parameters = ()
  
  type parametersRecord = ()
  
  let convertParameters = (r: parametersRecord): parameters => ()
  
  type column = (
    PgTypes.Pg_catalog.\"int8",
    PgTypes.Pg_catalog.\"int8",
    PgTypes.Pg_catalog.\"bool_"
  )
  
  type columns = array<column>
}