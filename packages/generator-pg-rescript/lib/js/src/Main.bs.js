// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var $$Promise = require("@rpominov/rescript-promise/lib/js/Promise.bs.js");
var Process = require("process");
var Child_process = require("child_process");

function findBinary(cwdOpt, name) {
  var cwd = cwdOpt !== undefined ? cwdOpt : Process.cwd();
  try {
    var parent = Path.resolve(cwd, "..");
    if (parent === cwd) {
      return ;
    }
    var potentialResult = Path.join(cwd, "node_modules", ".bin", name);
    if (Fs.existsSync(potentialResult)) {
      return potentialResult;
    } else {
      return findBinary(parent, name);
    }
  }
  catch (exn){
    return ;
  }
}

var rescriptBinary = findBinary(undefined, "rescript");

function generate(_data) {
  var code = "let x = `TODO`";
  if (rescriptBinary !== undefined) {
    return new Promise((function (resolve, reject) {
                  Child_process.execFile(rescriptBinary, [
                          "format",
                          "-stdin",
                          ".res"
                        ], (function (error, stdout, stderr) {
                            if (error == null) {
                              return resolve(stdout.toString());
                            }
                            var message = stderr.toString();
                            var tmp;
                            if (message === "") {
                              var message$1 = stdout.toString();
                              tmp = message$1 === "" ? error : $$Promise.makeJsError(message$1);
                            } else {
                              tmp = $$Promise.makeJsError(message);
                            }
                            return reject(tmp);
                          })).stdin.end(code);
                  
                }));
  } else {
    return $$Promise.reject($$Promise.makeJsError("Could not find rescript binary"));
  }
}

var defaultOutputPath = "{dir}/{name}.res";

exports.defaultOutputPath = defaultOutputPath;
exports.generate = generate;
/* rescriptBinary Not a pure module */
