// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var statement = "-- @getTypes\nselect\n\tt.oid,\n\tt.typname,\n\tt.typnamespace::regnamespace,\n\tt.typlen,\n\tt.typbyval,\n\tt.typtype,\n\tt.typcategory,\n\tt.typispreferred,\n\tt.typisdefined,\n\tt.typdelim,\n\tt.typrelid,\n\tt.typelem,\n\tt.typarray,\n\tt.typnotnull,\n\tt.typbasetype,\n\tt.typtypmod,\n\tt.typndims,\n\tt.typcollation,\n\tt.typdefault,\n\tr.rngsubtype,\n\t(select array_agg(a.attname order by a.attnum) \n\t\tfrom pg_attribute a where a.attrelid = t.typrelid) as attr_names,\n\t(select array_agg(a.atttypid order by a.attnum) \n\t\tfrom pg_attribute a where a.attrelid = t.typrelid) as attr_types\nfrom pg_type t\nleft join pg_range r on r.rngtypid = t.oid\nwhere t.oid = ANY ($1::int[])";

function convertParameters(r) {
  return [r.typeIds];
}

function convertRow(param) {
  return {
          oid: param[0],
          typname: param[1],
          typnamespace: param[2],
          typlen: param[3],
          typbyval: param[4],
          typtype: param[5],
          typcategory: param[6],
          typispreferred: param[7],
          typisdefined: param[8],
          typdelim: param[9],
          typrelid: param[10],
          typelem: param[11],
          typarray: param[12],
          typnotnull: param[13],
          typbasetype: param[14],
          typtypmod: param[15],
          typndims: param[16],
          typcollation: param[17],
          typdefault: param[18],
          rngsubtype: param[19],
          attr_names: param[20],
          attr_types: param[21]
        };
}

function run(client, parameters) {
  return client.query({
              values: [parameters.typeIds],
              text: statement
            });
}

function runArray(client, parameters) {
  return client.query({
              values: [parameters.typeIds],
              text: statement,
              rowMode: "array"
            });
}

var GetTypes = {
  statement: statement,
  convertParameters: convertParameters,
  convertRow: convertRow,
  run: run,
  runArray: runArray
};

var statement$1 = "-- @getEnumValues\nselect * from pg_enum where enumtypid = ANY ($1::int[]) order by enumsortorder";

function convertParameters$1(r) {
  return [r.typeIds];
}

function convertRow$1(param) {
  return {
          oid: param[0],
          enumtypid: param[1],
          enumsortorder: param[2],
          enumlabel: param[3]
        };
}

function run$1(client, parameters) {
  return client.query({
              values: [parameters.typeIds],
              text: statement$1
            });
}

function runArray$1(client, parameters) {
  return client.query({
              values: [parameters.typeIds],
              text: statement$1,
              rowMode: "array"
            });
}

var GetEnumValues = {
  statement: statement$1,
  convertParameters: convertParameters$1,
  convertRow: convertRow$1,
  run: run$1,
  runArray: runArray$1
};

exports.GetTypes = GetTypes;
exports.GetEnumValues = GetEnumValues;
/* No side effect */
