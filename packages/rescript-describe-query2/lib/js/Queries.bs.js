// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var statement = "-- @getTypes\nselect\n  t.oid,\n  t.typname,\n  t.typnamespace::regnamespace,\n  t.typlen,\n  t.typbyval,\n  t.typtype,\n  t.typcategory,\n  t.typispreferred,\n  t.typisdefined,\n  t.typdelim,\n  t.typrelid,\n  t.typelem,\n  t.typarray,\n  t.typnotnull,\n  t.typbasetype,\n  t.typtypmod,\n  t.typndims,\n  t.typcollation,\n  t.typdefault,\n  r.rngsubtype,\n  (select array_agg(a.attname::text order by a.attnum) \n    from pg_attribute a \n    where a.attrelid = t.typrelid \n    and a.attisdropped = false\n    and a.attnum >= 0) as attr_names,\n  (select array_agg(a.atttypid order by a.attnum) \n    from pg_attribute a where a.attrelid = t.typrelid \n    and a.attisdropped = false\n    and a.attnum >= 0) as attr_types,\n  (select array_agg(e.enumlabel::text order by e.enumsortorder)\n    from pg_enum e where e.enumtypid = t.oid) as enum_labels\nfrom pg_type t\nleft join pg_range r on r.rngtypid = t.oid\nwhere t.oid = ANY ($1::int[])";

function convertParameters(r) {
  return [r.typeIds];
}

function convertRow(param) {
  return {
          oid: param[0],
          typname: param[1],
          typnamespace: param[2],
          typlen: param[3],
          typbyval: param[4],
          typtype: param[5],
          typcategory: param[6],
          typispreferred: param[7],
          typisdefined: param[8],
          typdelim: param[9],
          typrelid: param[10],
          typelem: param[11],
          typarray: param[12],
          typnotnull: param[13],
          typbasetype: param[14],
          typtypmod: param[15],
          typndims: param[16],
          typcollation: param[17],
          typdefault: param[18],
          rngsubtype: param[19],
          attr_names: param[20],
          attr_types: param[21],
          enum_labels: param[22]
        };
}

function run(client, parameters) {
  return client.query({
              values: [parameters.typeIds],
              text: statement
            });
}

function runArray(client, parameters) {
  return client.query({
              values: [parameters.typeIds],
              text: statement,
              rowMode: "array"
            });
}

var GetTypes = {
  statement: statement,
  convertParameters: convertParameters,
  convertRow: convertRow,
  run: run,
  runArray: runArray
};

var statement$1 = "-- @getAttributes\nselect\n  a.attrelid,\n  a.attnum,\n  a.attrelid::regclass relname,\n  a.attname,\n  a.atttypid,\n  a.attndims,\n  a.atttypmod,\n  a.attnotnull,\n  a.attcollation,\n  a.attoptions,\n  a.attfdwoptions\nfrom pg_catalog.pg_attribute a where attrelid = ANY ($1::int[])";

function convertParameters$1(r) {
  return [r.relIds];
}

function convertRow$1(param) {
  return {
          attrelid: param[0],
          attnum: param[1],
          relname: param[2],
          attname: param[3],
          atttypid: param[4],
          attndims: param[5],
          atttypmod: param[6],
          attnotnull: param[7],
          attcollation: param[8],
          attoptions: param[9],
          attfdwoptions: param[10]
        };
}

function run$1(client, parameters) {
  return client.query({
              values: [parameters.relIds],
              text: statement$1
            });
}

function runArray$1(client, parameters) {
  return client.query({
              values: [parameters.relIds],
              text: statement$1,
              rowMode: "array"
            });
}

var GetAttributes = {
  statement: statement$1,
  convertParameters: convertParameters$1,
  convertRow: convertRow$1,
  run: run$1,
  runArray: runArray$1
};

exports.GetTypes = GetTypes;
exports.GetAttributes = GetAttributes;
/* No side effect */
